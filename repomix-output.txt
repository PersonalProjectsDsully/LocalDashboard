This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: tauri
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
tauri/build.sh
tauri/index.html
tauri/package.json
tauri/src-tauri/build.rs
tauri/src-tauri/Cargo.toml
tauri/src-tauri/src/main.rs
tauri/src-tauri/tauri.conf.json
tauri/src/App.tsx
tauri/src/components/ActivityFeed.tsx
tauri/src/components/CommandPalette.tsx
tauri/src/components/Sidebar.tsx
tauri/src/main.rs
tauri/src/main.tsx
tauri/src/pages/Dashboard.tsx
tauri/src/pages/Documents.tsx
tauri/src/pages/Projects.tsx
tauri/src/pages/Tasks.tsx
tauri/src/styles/App.css
tauri/src/styles/index.css
tauri/test/.gitignore
tauri/test/.vscode/extensions.json
tauri/test/index.html
tauri/test/package.json
tauri/test/README.md
tauri/test/src-tauri/.gitignore
tauri/test/src-tauri/build.rs
tauri/test/src-tauri/capabilities/default.json
tauri/test/src-tauri/Cargo.toml
tauri/test/src-tauri/src/lib.rs
tauri/test/src-tauri/src/main.rs
tauri/test/src-tauri/tauri.conf.json
tauri/test/src/assets/tauri.svg
tauri/test/src/assets/typescript.svg
tauri/test/src/assets/vite.svg
tauri/test/src/main.ts
tauri/test/src/styles.css
tauri/test/tsconfig.json
tauri/test/vite.config.ts
tauri/tsconfig.json
tauri/tsconfig.node.json
tauri/vite.config.ts

================================================================
Files
================================================================

================
File: tauri/build.sh
================
#!/bin/bash
set -e

echo "Building Tauri application..."

# Navigate to the source directory
cd /src

# Install npm dependencies
echo "Installing npm dependencies..."
npm install

# Build the application
echo "Building the application..."
cargo tauri build

# Copy the built artifacts to the dist directory
echo "Copying artifacts to dist directory..."
mkdir -p /dist
cp -r src-tauri/target/release/bundle/* /dist/

echo "Build completed successfully!"

================
File: tauri/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Projects Hub</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: tauri/package.json
================
{
  "name": "projects-hub",
  "private": true,
  "version": "1.0.0-alpha",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "tauri": "tauri"
  },
  "dependencies": {
    "@tauri-apps/api": "^1.5.0",
    "autoprefixer": "^10.4.15",
    "axios": "^1.5.0",
    "date-fns": "^2.30.0",
    "kbar": "^0.1.0-beta.43",
    "postcss": "^8.4.29",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "^18.2.0",
    "react-markdown": "^8.0.7",
    "react-router-dom": "^6.16.0",
    "react-syntax-highlighter": "^15.5.0",
    "recharts": "^2.8.0",
    "remark-gfm": "^3.0.1",
    "tailwindcss": "^3.3.3",
    "zustand": "^4.4.1"
  },
  "devDependencies": {
    "@tauri-apps/cli": "^1.5.0",
    "@types/react": "^18.2.15",
    "@types/react-beautiful-dnd": "^13.1.8",
    "@types/react-dom": "^18.2.7",
    "@types/react-syntax-highlighter": "^15.5.13",
    "@vitejs/plugin-react": "^4.0.4",
    "typescript": "^5.0.2",
    "vite": "^4.4.9"
  }
}

================
File: tauri/src-tauri/build.rs
================
fn main() {
  tauri_build::build()
}

================
File: tauri/src-tauri/Cargo.toml
================
[package]
name = "projects-hub"
version = "1.0.0-alpha"
description = "A local-first desktop workspace with projects, tasks, docs, alarms, workspace-snap, and a Focus Monitor."
authors = ["Projects Hub Team"]
license = ""
repository = ""
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "1.5", features = [] }

[dependencies]
tauri = { version = "1.5", features = ["dialog-all", "fs-all", "http-all", "notification-all", "os-all", "path-all", "shell-open", "window-all"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1.32.0", features = ["full"] }
reqwest = { version = "0.11.20", features = ["json"] }
chrono = "0.4.31"
thiserror = "1.0.48"
anyhow = "1.0.75"

[features]
# this feature is used for production builds or when `devPath` points to the filesystem
# DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]

================
File: tauri/src-tauri/src/main.rs
================
#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

use tauri::{Manager, SystemTray, SystemTrayEvent, SystemTrayMenu};
use std::sync::Mutex;

// Define application state
struct AppState {
    backend_url: Mutex<String>,
}

// Initialize the application
fn main() {
    // Create system tray menu
    let tray_menu = SystemTrayMenu::new();
    let system_tray = SystemTray::new().with_menu(tray_menu);

    tauri::Builder::default()
        .manage(AppState {
            backend_url: Mutex::new("http://localhost:8000".to_string()),
        })
        .system_tray(system_tray)
        .on_system_tray_event(|app, event| match event {
            SystemTrayEvent::LeftClick { .. } => {
                let window = app.get_window("main").unwrap();
                window.show().unwrap();
                window.set_focus().unwrap();
            }
            _ => {}
        })
        .on_window_event(|event| match event.event() {
            tauri::WindowEvent::CloseRequested { api, .. } => {
                event.window().hide().unwrap();
                api.prevent_close();
            }
            _ => {}
        })
        .setup(|app| {
            // Register global hotkeys
            let window = app.get_window("main").unwrap();
            
            // Setup any additional initialization here
            
            Ok(())
        })
        .invoke_handler(tauri::generate_handler![
            // Register command handlers here
        ])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}

================
File: tauri/src-tauri/tauri.conf.json
================
{
  "build": {
    "beforeBuildCommand": "npm run build",
    "beforeDevCommand": "npm run dev",
    "devPath": "http://localhost:5173",
    "distDir": "../dist"
  },
  "package": {
    "productName": "Projects Hub",
    "version": "1.0.0-alpha"
  },
  "tauri": {
    "allowlist": {
      "all": false,
      "shell": {
        "all": false,
        "execute": false,
        "open": true,
        "scope": [],
        "sidecar": false
      },
      "dialog": {
        "all": true,
        "ask": true,
        "confirm": true,
        "message": true,
        "open": true,
        "save": true
      },
      "fs": {
        "all": true,
        "readFile": true,
        "writeFile": true,
        "readDir": true,
        "copyFile": true,
        "createDir": true,
        "removeDir": true,
        "removeFile": true,
        "renameFile": true,
        "exists": true,
        "scope": ["$DOCUMENT/*", "$DESKTOP/*"]
      },
      "http": {
        "all": true,
        "request": true,
        "scope": ["http://localhost:8000/*"]
      },
      "notification": {
        "all": true
      },
      "os": {
        "all": true
      },
      "path": {
        "all": true
      },
      "window": {
        "all": true
      }
    },
    "bundle": {
      "active": true,
      "category": "Productivity",
      "copyright": "",
      "deb": {
        "depends": []
      },
      "externalBin": [],
      "icon": [
        "icons/32x32.png",
        "icons/128x128.png",
        "icons/128x128@2x.png",
        "icons/icon.icns",
        "icons/icon.ico"
      ],
      "identifier": "com.projectshub.dev",
      "longDescription": "A local-first desktop workspace with projects, tasks, docs, alarms, workspace-snap, and a Focus Monitor.",
      "macOS": {
        "entitlements": null,
        "exceptionDomain": "",
        "frameworks": [],
        "providerShortName": null,
        "signingIdentity": null
      },
      "resources": [],
      "shortDescription": "Projects Hub - Local-first desktop workspace",
      "targets": "all",
      "windows": {
        "certificateThumbprint": null,
        "digestAlgorithm": "sha256",
        "timestampUrl": ""
      }
    },
    "security": {
      "csp": null
    },
    "updater": {
      "active": false
    },
    "windows": [
      {
        "fullscreen": false,
        "height": 768,
        "resizable": true,
        "title": "Projects Hub",
        "width": 1024,
        "minWidth": 800,
        "minHeight": 600
      }
    ]
  }
}

================
File: tauri/src/App.tsx
================
import React, { useState, useEffect, useRef } from 'react'; // Added useRef
import { Routes, Route } from 'react-router-dom';
import { KBarProvider } from 'kbar';
import Sidebar from './components/Sidebar';
import Dashboard from './pages/Dashboard';
import Projects from './pages/Projects';
import Documents from './pages/Documents';
import Tasks from './pages/Tasks';
import CommandPalette from './components/CommandPalette';
import ActivityFeed, { ActivityItem } from './components/ActivityFeed'; // Import type and component
import './styles/App.css';

// Simple Event Bus for cross-component communication triggered by WebSocket
export const eventBus = {
  listeners: {} as Record<string, Array<(data: any) => void>>,
  on(event: string, callback: (data: any) => void) {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(callback);
    // Return an unsubscribe function
    return () => this.off(event, callback);
  },
  off(event: string, callback: (data: any) => void) {
    if (!this.listeners[event]) return;
    this.listeners[event] = this.listeners[event].filter(listener => listener !== callback);
  },
  emit(event: string, data: any) {
    if (!this.listeners[event]) return;
    // Use setTimeout to ensure state updates triggered by listeners happen outside the current render cycle if needed
    setTimeout(() => {
        this.listeners[event]?.forEach(listener => {
            try {
                listener(data);
            } catch (e) {
                console.error(`Error in event listener for ${event}:`, e);
            }
        });
    }, 0);
  },
};


function App() {
  const [isWsConnected, setIsWsConnected] = useState(false);
  const [wsClient, setWsClient] = useState<WebSocket | null>(null);
  const [activityItems, setActivityItems] = useState<ActivityItem[]>([]); // Manage activity feed state here
  const connectIntervalRef = useRef<NodeJS.Timeout | null>(null); // Ref to manage reconnect interval


  // Initialize WebSocket connection and reconnection logic
  useEffect(() => {
    let ws: WebSocket | null = null; // Local variable for the connection instance

    const connectWebSocket = () => {
        // Clear previous interval timer if it exists
        if (connectIntervalRef.current) {
            clearTimeout(connectIntervalRef.current); // Use clearTimeout since we use setTimeout for retries
            connectIntervalRef.current = null;
        }

        // Avoid reconnecting if already connected or connecting
        if (ws && (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING)) {
            console.log("WebSocket connection attempt skipped: Already connected or connecting.");
            return;
        }

        console.log("Attempting WebSocket connection to ws://localhost:8000/ws");
        ws = new WebSocket('ws://localhost:8000/ws');
        setWsClient(ws); // Store the WebSocket instance being used

        ws.onopen = () => {
            console.log('WebSocket connected');
            setIsWsConnected(true);
            // Clear interval timer on successful connection
            if (connectIntervalRef.current) {
                clearTimeout(connectIntervalRef.current);
                connectIntervalRef.current = null;
            }
        };

        ws.onclose = (event) => {
            console.log(`WebSocket disconnected. Code: ${event.code}, Reason: ${event.reason}. Attempting reconnect...`);
            setIsWsConnected(false);
            setWsClient(null);
            ws = null; // Clear local instance

            // Schedule reconnection attempt only if not already scheduled
            if (!connectIntervalRef.current) {
                 // Simple exponential backoff logic using setTimeout
                 const retry = (delay: number) => {
                     connectIntervalRef.current = setTimeout(() => {
                         console.log(`Retrying WebSocket connection (delay: ${delay}ms)...`);
                         connectWebSocket(); // Attempt to reconnect
                         // Schedule next retry - no need to recursively call retry here, onclose will trigger again if fails
                     }, delay);
                 };
                 retry(1000); // Start with 1 second delay
            }
        };

        ws.onerror = (error) => {
            console.error('WebSocket error:', error);
            // The 'onclose' event will usually fire after an error, triggering the reconnect logic.
            // Explicitly close if it's in an error state but not closed yet.
            if (ws && ws.readyState !== WebSocket.CLOSED) {
                ws.close();
            }
        };

        ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                console.log('WebSocket message received:', message);
                eventBus.emit('websocket_message', message); // Emit a generic message event

                // Handle specific events for central state (like Activity Feed)
                 if (message.type === 'activity_log' && message.payload) {
                     const newItem = message.payload as ActivityItem;
                     // Ensure required fields exist before adding
                     if (newItem.id && newItem.message && newItem.timestamp) {
                        setActivityItems(prev => [newItem, ...prev.slice(0, 99)]); // Add to start, limit to 100 items
                        // Announce new activity for screen readers (if needed)
                        const announcer = document.getElementById('activity-announcer');
                        if (announcer) {
                            announcer.textContent = `New activity: ${newItem.message}`;
                        }
                     } else {
                         console.warn("Received activity_log payload missing required fields:", message.payload);
                     }
                 } else if (message.type) {
                     // Emit specific event types for components to subscribe to
                     eventBus.emit(message.type, message);
                 } else {
                      console.warn("Received WebSocket message without a 'type' field:", message);
                 }

            } catch (e) {
                console.error("Failed to parse WebSocket message:", event.data, e);
            }
        };
    }

    connectWebSocket(); // Initial connection attempt on component mount

    // Cleanup function on component unmount
    return () => {
      if (connectIntervalRef.current) {
          clearTimeout(connectIntervalRef.current); // Use clearTimeout
          connectIntervalRef.current = null;
      }
      // Use the wsClient state variable for cleanup ensures we close the *correct* instance
      if (wsClient) {
        console.log('Closing WebSocket connection on App unmount.');
        wsClient.onclose = null; // Prevent reconnect logic during intentional close
        wsClient.onerror = null;
        wsClient.onmessage = null;
        wsClient.onopen = null;
        wsClient.close();
      }
    };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Empty dependency array: run only once on mount

  return (
    <KBarProvider>
      <div className="app-container bg-gray-100 dark:bg-gray-900">
        {/* Sidebar */}
        <nav className="sidebar w-[var(--sidebar-width)] bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 p-4 flex flex-col overflow-y-auto flex-shrink-0">
          <Sidebar />
        </nav>

        {/* Main Content Area */}
        <main className="main-content flex-1 overflow-y-auto bg-gray-50 dark:bg-gray-900 relative">
          {/* Connection Status Indicator */}
           {!isWsConnected && (
               <div className="sticky top-0 z-50 p-2 bg-yellow-100 dark:bg-yellow-700/60 text-yellow-800 dark:text-yellow-100 text-xs text-center shadow">
                   Connection to backend lost. Attempting to reconnect...
               </div>
           )}
           {/* Router View */}
          <Routes>
            <Route path="/" element={<Dashboard />} />
            <Route path="/projects" element={<Projects />} />
            <Route path="/documents" element={<Documents />} />
            <Route path="/tasks" element={<Tasks />} />
            {/* Add other routes as needed */}
          </Routes>
        </main>

        {/* Activity Feed */}
        <aside className="activity-feed w-[var(--feed-width)] bg-white dark:bg-gray-800 border-l border-gray-200 dark:border-gray-700 flex flex-col overflow-hidden flex-shrink-0">
           <ActivityFeed initialItems={activityItems} /> {/* Pass centrally managed items */}
           {/* Announcer for screen readers */}
           <div className="sr-only" aria-live="polite" id="activity-announcer"></div>
        </aside>

        {/* Command Palette (Portal) */}
        <CommandPalette />
      </div>
    </KBarProvider>
  );
}

export default App;

================
File: tauri/src/components/ActivityFeed.tsx
================
import React, { useState, useEffect } from 'react';
import { eventBus } from '../App'; // Assuming eventBus is exported from App.tsx
import { formatDistanceToNow } from 'date-fns'; // For relative time formatting

export interface ActivityItem {
    id?: string; // Optional ID if available from backend
    timestamp: string; // ISO 8601 format string
    type: string; // e.g., 'project_created', 'task_completed', 'document_added', 'workspace_started', 'focus_warning'
    message: string; // Human-readable message
    source?: string; // Optional: 'workspace_agent', 'focus_monitor', 'app'
    data?: Record<string, any>; // Optional structured data
}

interface ActivityFeedProps {
    initialItems?: ActivityItem[]; // Allow passing initial items from parent
}

// Helper function to get icon based on type
const getActivityIcon = (type: string): string => {
    if (type.includes('project')) return '📁'; // Folder for project
    if (type.includes('task')) return '✅'; // Checkmark for task
    if (type.includes('document')) return '📄'; // Document icon
    if (type.includes('workspace')) return '🚀'; // Rocket for workspace start/stop
    if (type.includes('focus') || type.includes('warning')) return '⚠️'; // Warning for focus alerts
    if (type.includes('error')) return '❌'; // Error icon
    if (type.includes('launch')) return '🚀'; // Rocket for launch
     if (type.includes('minimize')) return '➖'; // Minimize icon
    // Add more specific icons as needed
    return '🔔'; // Default bell icon
};

// Helper to format timestamp
const formatTimestamp = (isoString: string): string => {
    try {
        return formatDistanceToNow(new Date(isoString), { addSuffix: true });
    } catch (error) {
        console.error("Error formatting date:", isoString, error);
        return isoString; // Fallback to original string
    }
};

const ActivityFeed: React.FC<ActivityFeedProps> = ({ initialItems = [] }) => {
    const [activities, setActivities] = useState<ActivityItem[]>(initialItems);
    const [maxItems] = useState(50); // Limit the number of items displayed

    useEffect(() => {
        // Listen for WebSocket messages forwarded by the event bus
        const handleWebSocketMessage = (message: any) => {
            // Check if it's an activity log message type from the backend format
            if (message.type === 'activity_log' && message.payload) {
                const newActivity: ActivityItem = {
                    timestamp: message.payload.timestamp || new Date().toISOString(),
                    type: message.payload.type || 'unknown',
                    message: message.payload.message || 'Unknown activity',
                    source: message.payload.source || 'backend', // Identify source if available
                    id: message.payload.id || `activity-${Date.now()}-${Math.random()}` // Generate local ID if none provided
                };

                // Announce the new activity for screen readers
                const announcer = document.getElementById('activity-announcer');
                if (announcer) {
                    announcer.textContent = `New activity: ${newActivity.message}`;
                }

                setActivities(prevActivities => {
                    // Avoid adding duplicates if IDs are provided and match
                    if (newActivity.id && prevActivities.some(act => act.id === newActivity.id)) {
                        return prevActivities;
                    }
                    // Add new activity to the top and limit the total number
                    return [newActivity, ...prevActivities.slice(0, maxItems - 1)];
                });
            }
            // Handle other potential message types if needed
            else if (message.type && message.message) {
                 const newActivity: ActivityItem = {
                    timestamp: message.timestamp || new Date().toISOString(),
                    type: message.type,
                    message: message.message,
                    source: message.source || 'websocket',
                    id: message.id || `activity-${Date.now()}-${Math.random()}`
                 };
                 const announcer = document.getElementById('activity-announcer');
                 if (announcer) {
                    announcer.textContent = `New activity: ${newActivity.message}`;
                 }
                 setActivities(prevActivities => [newActivity, ...prevActivities.slice(0, maxItems - 1)]);
            }
        };

        // Subscribe to the event
        const unsubscribe = eventBus.on('websocket_message', handleWebSocketMessage);

        // Cleanup subscription on unmount
        return () => {
            unsubscribe();
        };
    }, [maxItems]); // Re-run effect if maxItems changes (though it's constant here)

    return (
        <div className="activity-feed-container flex flex-col h-full">
            <h2 className="text-sm font-semibold uppercase p-4 border-b border-gray-200 dark:border-gray-700 text-gray-600 dark:text-gray-300 tracking-wider sticky top-0 bg-white dark:bg-gray-800 z-10">
                Activity Feed
            </h2>
            {activities.length === 0 ? (
                <div className="flex-grow flex items-center justify-center text-sm text-gray-500 dark:text-gray-400 p-4">
                    No recent activity.
                </div>
            ) : (
                <ul className="flex-grow overflow-y-auto p-4 space-y-3">
                    {activities.map((activity) => (
                        <li key={activity.id || activity.timestamp} className="activity-item flex gap-3">
                            <div className="activity-icon mt-0.5 text-base">
                                {getActivityIcon(activity.type)}
                            </div>
                            <div className="activity-details flex-1 text-xs">
                                <p className="activity-message text-gray-800 dark:text-gray-100 leading-snug">
                                    {activity.message}
                                </p>
                                <div className="activity-meta text-gray-500 dark:text-gray-400 mt-0.5 flex items-center gap-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.414-1.414L11 10.586V6z" clipRule="evenodd" />
                                    </svg>
                                    <time dateTime={activity.timestamp} title={new Date(activity.timestamp).toLocaleString()}>
                                        {formatTimestamp(activity.timestamp)}
                                    </time>
                                    {activity.source && (
                                        <span className="text-gray-400 dark:text-gray-500 text-[10px] ml-1">({activity.source})</span>
                                    )}
                                </div>
                            </div>
                        </li>
                    ))}
                </ul>
            )}
            {/* Announcer element for screen readers - placed outside the list */}
             <div id="activity-announcer" className="sr-only" aria-live="polite" aria-atomic="true"></div>
        </div>
    );
};

export default ActivityFeed;

================
File: tauri/src/components/CommandPalette.tsx
================
import React from 'react';
import {
  KBarProvider,
  KBarPortal,
  KBarPositioner,
  KBarAnimator,
  KBarSearch,
  KBarResults,
  useMatches,
  ActionImpl,
  ActionId,
} from 'kbar';
import { useNavigate } from 'react-router-dom';
import { eventBus } from '../App'; // Import the event bus

const CommandPalette: React.FC = () => {
  const navigate = useNavigate();

  // Define actions available in the command palette
  const actions = [
    // Navigation Actions
    {
      id: 'dashboard',
      name: 'Dashboard',
      shortcut: ['g', 'd'],
      keywords: 'home overview main',
      section: 'Navigation',
      perform: () => navigate('/'),
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" /></svg>,
    },
    {
      id: 'projects',
      name: 'Projects',
      shortcut: ['g', 'p'],
      keywords: 'project list view manage',
      section: 'Navigation',
      perform: () => navigate('/projects'),
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" /></svg>,
    },
     {
      id: 'documents',
      name: 'Documents',
      shortcut: ['g', 'o'], // 'o' for documents seems reasonable
      keywords: 'docs files notes knowledge',
      section: 'Navigation',
      perform: () => navigate('/documents'),
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" /></svg>,
    },
     {
      id: 'tasks',
      name: 'Tasks',
      shortcut: ['g', 't'],
      keywords: 'task todo list action',
      section: 'Navigation',
      perform: () => navigate('/tasks'),
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" /></svg>,
    },
     // TODO: Add actions for:
    // - Creating new project
    // - Creating new task
    // - Creating new document
    // - Activating a project workspace
    // - Toggling focus mode
    // - Searching specific content types (projects, tasks, docs)

      {
      id: 'toggleFocus',
      name: 'Toggle Focus Monitor',
      shortcut: ['f', 'm'],
      keywords: 'focus mode distraction block',
      section: 'General',
      perform: () => {
        // Need to interact with backend via API or trigger an event listened to by Sidebar
        // Option 1: Direct API call (if simple)
        fetch('http://localhost:8000/focus/toggle', { method: 'POST' })
          .then(res => {
            if (!res.ok) throw new Error('Failed to toggle focus');
            // Trigger UI update (if not handled by WebSocket already)
            eventBus.emit('focus_status_changed', {}); // Emit generic event
          })
          .catch(error => console.error('Error toggling focus from KBar:', error));

        // Option 2: Event Bus (preferred if Sidebar handles state)
        // eventBus.emit('toggle_focus_request', {});
      },
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z" clipRule="evenodd" /></svg>,
    },
  ];

  // Component to render the results list
  const RenderResults = () => {
    const { results, rootActionId } = useMatches();

    return (
      <KBarResults
        items={results}
        onRender={({ item, active }) =>
          typeof item === 'string' ? (
            // Render section header
            <div className="px-4 pt-4 pb-2 text-xs uppercase text-gray-500 dark:text-gray-400 tracking-wider">{item}</div>
          ) : (
            // Render action item
            <div
                className={`flex items-center justify-between px-4 py-2 cursor-pointer transition-colors duration-100 ${
                active ? 'bg-blue-100 dark:bg-blue-800/50' : 'bg-transparent'
              }`}
            >
              <div className="flex items-center gap-3">
                 {item.icon && <span className="text-gray-500 dark:text-gray-400">{item.icon}</span>}
                <span className="text-sm text-gray-800 dark:text-gray-100">{item.name}</span>
              </div>
               {item.shortcut?.length ? (
                <div aria-hidden className="grid grid-flow-col gap-1">
                  {item.shortcut.map((sc) => (
                    <kbd key={sc} className="px-1.5 py-0.5 text-xs font-mono text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 rounded border border-gray-300 dark:border-gray-600">
                      {sc}
                    </kbd>
                  ))}
                </div>
              ) : null}
            </div>
          )
        }
      />
    );
  };

  return (
    <KBarProvider actions={actions}>
      <KBarPortal> {/* Renders the KBar components into a Portal */}
        <KBarPositioner className="fixed inset-0 z-50 bg-black bg-opacity-50 backdrop-blur-sm flex items-start justify-center pt-20"> {/* Position in center top */}
          <KBarAnimator className="w-full max-w-xl bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden border border-gray-200 dark:border-gray-700">
            <KBarSearch
              className="w-full px-4 py-3 text-lg outline-none bg-transparent text-gray-800 dark:text-gray-100 border-b border-gray-200 dark:border-gray-700"
              placeholder="Type a command or search..."
            />
            <RenderResults />
             <div className="px-4 py-2 text-xs text-center text-gray-500 dark:text-gray-400 border-t border-gray-200 dark:border-gray-700">
                Tip: Use <kbd className="px-1 py-0.5 text-xs font-mono bg-gray-100 dark:bg-gray-700 rounded border border-gray-300 dark:border-gray-600">↑</kbd> <kbd className="px-1 py-0.5 text-xs font-mono bg-gray-100 dark:bg-gray-700 rounded border border-gray-300 dark:border-gray-600">↓</kbd> to navigate, <kbd className="px-1 py-0.5 text-xs font-mono bg-gray-100 dark:bg-gray-700 rounded border border-gray-300 dark:border-gray-600">Enter</kbd> to select.
             </div>
          </KBarAnimator>
        </KBarPositioner>
      </KBarPortal>
      {/* Can add a button here to trigger KBar if needed, or use global hotkey */}
    </KBarProvider>
  );
};

export default CommandPalette;

================
File: tauri/src/components/Sidebar.tsx
================
import React, { useState, useEffect } from 'react';
import { NavLink } from 'react-router-dom';
import axios from 'axios';
import { eventBus } from '../App'; // Import eventBus

interface Alarm {
  id: string;
  title: string;
  days: number;
  time?: string;
  thresholds: {
    green: number;
    amber: number;
    red: number;
  };
}

const Sidebar: React.FC = () => {
  const [alarms, setAlarms] = useState<Alarm[]>([]);
  const [isFocusMonitorActive, setIsFocusMonitorActive] = useState(true); // Default UI state
  const [loadingAlarms, setLoadingAlarms] = useState(true);
  const [loadingFocusStatus, setLoadingFocusStatus] = useState(true);
  const [error, setError] = useState<string | null>(null);


  const fetchSidebarData = async (isInitial = false) => {
        // Fetch alarms
        if (isInitial || !loadingAlarms) { // Prevent concurrent fetches
            setLoadingAlarms(true);
            try {
                const alarmResponse = await axios.get('http://localhost:8000/alarms');
                setAlarms(alarmResponse.data.alarms || []);
                if (error?.includes('alarms')) setError(null); // Clear specific error on success
            } catch (err) {
                console.error('Error fetching alarms:', err);
                setAlarms([]);
                setError(prev => prev ? `${prev}\nFailed to load alarms.` : 'Failed to load alarms.');
            } finally {
                setLoadingAlarms(false);
            }
        }

        // Fetch focus status (only needed initially, then rely on toggle/WS)
         if (isInitial || !loadingFocusStatus) {
            setLoadingFocusStatus(true);
            try {
                const focusResponse = await axios.get('http://localhost:8000/focus/status');
                const backendState = focusResponse.data.active;
                setIsFocusMonitorActive(backendState);
                if (error?.includes('focus status')) setError(null);
            } catch (err) {
                console.error('Error fetching focus status:', err);
                // Keep UI state as is, maybe show error?
                setError(prev => prev ? `${prev}\nFailed to get focus status.` : 'Failed to get focus status.');
            } finally {
                setLoadingFocusStatus(false);
            }
        }
  };


  useEffect(() => {
    fetchSidebarData(true); // Initial fetch

    // Refresh alarms periodically (e.g., every 5 minutes)
    const intervalId = setInterval(() => fetchSidebarData(false), 5 * 60 * 1000);

    // --- WebSocket Listeners ---
    const handleAlarmUpdate = () => {
         console.log("Alarms updated via WS, refetching...");
         fetchSidebarData(false);
    };
    const handleFocusStatusUpdate = (message: { active: boolean }) => {
         console.log(`Focus status updated via WS: ${message.active}`);
         setIsFocusMonitorActive(message.active);
    };

    const unsubAlarms = eventBus.on('alarms_updated', handleAlarmUpdate);
    const unsubFocus = eventBus.on('focus_status_changed', handleFocusStatusUpdate);

    // Cleanup interval and listeners on component unmount
    return () => {
        clearInterval(intervalId);
        unsubAlarms();
        unsubFocus();
    };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Run setup once


  const handleFocusToggle = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const newState = event.target.checked;
    // Optimistic update
    setIsFocusMonitorActive(newState);
    setError(null); // Clear error on new action
    try {
      // Send toggle request to backend
      const response = await axios.post('http://localhost:8000/focus/toggle');
      // Update UI with the actual state returned by the backend (in case of race conditions)
      setIsFocusMonitorActive(response.data.active);
    } catch (error) {
      console.error('Failed to toggle focus monitor:', error);
      // Revert UI state on error
      setIsFocusMonitorActive(!newState);
      setError('Failed to toggle Focus Monitor.');
      // Show error notification to user?
    }
  };


  const getAlarmStatus = (alarm: Alarm): 'red' | 'amber' | 'green' => {
    const daysLeft = alarm.days;
    if (daysLeft <= alarm.thresholds.red) return 'red';
    if (daysLeft <= alarm.thresholds.amber) return 'amber';
    return 'green';
  };

   const getAlarmPillClasses = (status: string) => {
     switch (status) {
      case 'red': return 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200 border border-red-300 dark:border-red-700/50';
      case 'amber': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-700/40 dark:text-yellow-100 border border-yellow-300 dark:border-yellow-600/50';
      case 'green': return 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200 border border-green-300 dark:border-green-700/50';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600';
    }
  }

  const getAlarmIcon = (status: string) => '⏰';

  const handleAddAlarm = () => {
      // TODO: Implement Add Alarm modal/form
      console.log("Add alarm clicked - Placeholder");
  }

  return (
    <>
      <div className="sidebar-header mb-6">
        <h1 className="text-xl font-bold text-gray-800 dark:text-gray-100 tracking-wider">Projects Hub</h1>
      </div>

      {/* Main Navigation */}
      <nav className="sidebar-nav flex-grow space-y-1">
        <NavLink to="/" className={({ isActive }) => `nav-item flex items-center gap-3 px-3 py-2 rounded text-sm transition-colors duration-150 ${isActive ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'}`}>
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" /></svg>
          <span className="truncate">Dashboard</span>
        </NavLink>
        <NavLink to="/projects" className={({ isActive }) => `nav-item flex items-center gap-3 px-3 py-2 rounded text-sm transition-colors duration-150 ${isActive ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'}`}>
           <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" /></svg>
          <span className="truncate">Projects</span>
        </NavLink>
        <NavLink to="/documents" className={({ isActive }) => `nav-item flex items-center gap-3 px-3 py-2 rounded text-sm transition-colors duration-150 ${isActive ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'}`}>
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clipRule="evenodd" /></svg>
          <span className="truncate">Documents</span>
        </NavLink>
        <NavLink to="/tasks" className={({ isActive }) => `nav-item flex items-center gap-3 px-3 py-2 rounded text-sm transition-colors duration-150 ${isActive ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300 font-medium' : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'}`}>
           <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" /></svg>
          <span className="truncate">Tasks</span>
        </NavLink>
      </nav>

      {/* Alarms Section */}
      <div className="sidebar-section mt-8">
        <h2 className="text-xs uppercase font-semibold mb-2 text-gray-500 dark:text-gray-400 tracking-wider">Alarms</h2>

         {error && !error.includes('focus status') && /* Show only alarm errors here */
             <div className="text-xs text-red-500 dark:text-red-400 mb-2">{error}</div>
         }

        {loadingAlarms ? (
             <div className="text-sm text-gray-500 dark:text-gray-400">Loading...</div>
        ) : alarms.length > 0 ? (
          <div className="alarms-list space-y-1.5">
            {alarms.slice(0, 5).map((alarm) => { // Limit displayed alarms
                const status = getAlarmStatus(alarm);
                return (
                    <div key={alarm.id} className={`alarm-pill text-xs px-2 py-1 rounded-full flex items-center justify-between gap-2 ${getAlarmPillClasses(status)}`} title={`${alarm.title} - ${alarm.days} days left. Thresholds: R<=${alarm.thresholds.red}, A<=${alarm.thresholds.amber}`}>
                        <span className={`alarm-icon flex-shrink-0`}>{getAlarmIcon(status)}</span>
                        <span className="alarm-title flex-1 truncate">{alarm.title}</span>
                        <span className="alarm-days font-medium flex-shrink-0">{alarm.days}d</span>
                    </div>
                )
            })}
             {alarms.length > 5 && (
                 <div className="text-xs text-center text-gray-500 dark:text-gray-400 mt-1">+ {alarms.length - 5} more</div>
             )}
          </div>
        ) : (
          <div className="text-sm text-gray-500 dark:text-gray-400">No alarms set</div>
        )}

        <button
            className="add-alarm-btn w-full mt-3 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 flex items-center justify-center gap-1 py-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/30"
            onClick={handleAddAlarm}
            title="Add New Alarm"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" /></svg>
           Add alarm
        </button>
      </div>

      {/* Footer Section */}
      <div className="sidebar-footer mt-auto pt-4 border-t border-gray-200 dark:border-gray-700">
        <div className="focus-monitor-toggle flex items-center justify-between text-sm text-gray-700 dark:text-gray-200" title={loadingFocusStatus ? "Loading status..." : (isFocusMonitorActive ? "Focus Monitor is ON" : "Focus Monitor is OFF")}>
          <label htmlFor="focus-toggle" className="cursor-pointer select-none">Focus Monitor</label>
          <div className="relative inline-block w-10 h-6 align-middle select-none transition duration-200 ease-in">
             {loadingFocusStatus ? (
                 <span className="text-xs text-gray-400 italic">...</span>
             ) : (
                 <>
                     <input
                        type="checkbox"
                        name="focus-toggle"
                        id="focus-toggle"
                        className="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white dark:bg-gray-400 border-4 appearance-none cursor-pointer border-gray-300 dark:border-gray-500 checked:bg-blue-500 checked:dark:bg-blue-500 checked:border-blue-500 checked:dark:border-blue-500 checked:right-0 transition-all duration-200 ease-in-out"
                        style={{ right: isFocusMonitorActive ? '0' : 'auto' }} // Dynamic positioning
                        checked={isFocusMonitorActive}
                        onChange={handleFocusToggle}
                        disabled={loadingFocusStatus}
                     />
                     <label htmlFor="focus-toggle" className="toggle-label block overflow-hidden h-6 rounded-full bg-gray-300 dark:bg-gray-600 cursor-pointer"></label>
                 </>
             )}
          </div>
           {/* Basic toggle styling - can enhance */}
            <style>{`
                #focus-toggle:checked + .toggle-label { background-color: #60A5FA; /* light blue */ }
                .dark #focus-toggle:checked + .toggle-label { background-color: #3B82F6; /* darker blue */ }
            `}</style>
        </div>
         {error && error.includes('focus status') && /* Show focus toggle errors here */
             <div className="text-xs text-red-500 dark:text-red-400 mt-1">{error.replace('Failed to get focus status.','').trim()}</div>
         }
      </div>
    </>
  );
};

export default Sidebar;

================
File: tauri/src/main.rs
================
#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

use tauri::{AppHandle, Manager, SystemTray, SystemTrayEvent, SystemTrayMenu, Wry, GlobalShortcutManager, CustomMenuItem, SystemTrayMenuItem};
use std::sync::Mutex;
use std::process::{Command, Stdio};
use std::path::PathBuf;
use tokio::process::Command as TokioCommand; // Use tokio's Command for async execution
use tokio::io::{BufReader, AsyncBufReadExt}; // For reading stdout/stderr async

// Define application state (optional, if needed)
struct AppState {
    backend_url: Mutex<String>,
    // Add other state if required
}

// Helper function to find python executable
fn find_python() -> String {
    let candidates = if cfg!(target_os = "windows") {
        vec!["python.exe", "py.exe", "python3.exe"]
    } else {
        vec!["python3", "python"]
    };

    for candidate in candidates {
        if Command::new(candidate).arg("--version").output().is_ok() {
            return candidate.to_string();
        }
    }
    // Fallback or error
    eprintln!("Warning: Could not automatically find a Python executable. Defaulting to 'python'. Please ensure it's in PATH.");
    "python".to_string()
}

// Helper function to resolve script path more robustly
fn resolve_script_path(app_handle: &AppHandle<Wry>, script_name: &str) -> Result<PathBuf, String> {
     // 1. Check Resource directory (for bundled apps)
     if let Ok(path) = app_handle.path().resolve(script_name, tauri::path::BaseDirectory::Resource) {
          if path.exists() {
               println!("Found script in Resource dir: {:?}", path);
               return Ok(path);
          }
     }
     // 2. Check alongside executable (common for development or simple builds)
     if let Ok(exe_path) = std::env::current_exe() {
          if let Some(exe_dir) = exe_path.parent() {
               let path = exe_dir.join(script_name);
               if path.exists() {
                    println!("Found script alongside executable: {:?}", path);
                    return Ok(path);
               }
          }
     }
     // 3. Check relative to current working directory (less reliable)
     let cwd_path = PathBuf::from(script_name);
     if cwd_path.exists() {
          println!("Warning: Found script in CWD: {:?}", cwd_path);
          return Ok(cwd_path); // Use CWD path if found
     }

     Err(format!("Script '{}' not found in Resource dir, alongside executable, or in CWD.", script_name))
}


// Command to trigger the workspace snap agent
#[tauri::command]
async fn trigger_workspace_snap(
    app_handle: tauri::AppHandle<Wry>,
    config_path: String,
    project_path: Option<String>
) -> Result<(), String> {

    let python_executable = find_python();
    println!("Using Python executable: {}", python_executable);

    let script_path = resolve_script_path(&app_handle, "workspace_snap_agent.py")?;
    println!("Using Workspace Snap script path: {:?}", script_path);


    // --- Build Command using TokioCommand for async ---
    let mut cmd = TokioCommand::new(&python_executable);
    cmd.arg(&script_path);
    cmd.arg("--config");
    cmd.arg(config_path); // Rely on the path passed from JS being correct

    if let Some(p_path) = project_path {
        cmd.arg("--project-path");
        cmd.arg(p_path);
    }

    // Configure stdio for async reading
    cmd.stdout(Stdio::piped());
    cmd.stderr(Stdio::piped());


    // --- Execute Command Async ---
    println!("Spawning Workspace Snap (async): {:?}", cmd);
    let command_str = format!("{:?}", cmd); // For logging

    match cmd.spawn() {
        Ok(mut child) => {
            let pid = child.id().map(|id| id.to_string()).unwrap_or_else(|| "N/A".to_string());
            println!("Workspace Snap Agent spawned with PID: {}", pid);
            app_handle.emit("workspace-snap-started", ()).unwrap_or_else(|e| eprintln!("Failed to emit workspace-snap-started: {}", e));


            // --- Asynchronously handle stdout and stderr ---
            let stdout = child.stdout.take().expect("Failed to capture stdout");
            let stderr = child.stderr.take().expect("Failed to capture stderr");
            let stdout_reader = BufReader::new(stdout);
            let stderr_reader = BufReader::new(stderr);

            // Process stdout lines
            let app_handle_stdout = app_handle.clone();
            tokio::spawn(async move {
                let mut lines = stdout_reader.lines();
                while let Ok(Some(line)) = lines.next_line().await {
                    println!("[Snap Agent STDOUT] {}", line);
                    // Optionally emit stdout lines to frontend for detailed logging
                    // app_handle_stdout.emit("workspace-snap-stdout", line).ok();
                }
            });

            // Process stderr lines
            let app_handle_stderr = app_handle.clone();
            tokio::spawn(async move {
                let mut lines = stderr_reader.lines();
                while let Ok(Some(line)) = lines.next_line().await {
                    eprintln!("[Snap Agent STDERR] {}", line);
                    // Emit stderr lines to frontend for error display
                    app_handle_stderr.emit("workspace-snap-stderr", line).unwrap_or_else(|e| eprintln!("Failed to emit stderr: {}", e));
                }
            });


             // --- Wait for completion ---
            let app_handle_status = app_handle.clone();
            tokio::spawn(async move {
                match child.wait().await {
                    Ok(status) => {
                        println!("Workspace Snap Agent finished with status: {}", status);
                        if status.success() {
                             app_handle_status.emit("workspace-snap-success", ()).unwrap_or_else(|e| eprintln!("Failed to emit success: {}", e));
                        } else {
                             let error_msg = format!("Workspace Snap Agent exited with status: {}", status);
                             eprintln!("{}", error_msg);
                             app_handle_status.emit("workspace-snap-error", error_msg).unwrap_or_else(|e| eprintln!("Failed to emit error: {}", e));
                        }
                    }
                    Err(e) => {
                         let error_msg = format!("Failed to wait for Workspace Snap Agent ({:?}): {}", command_str, e);
                         eprintln!("{}", error_msg);
                         app_handle_status.emit("workspace-snap-error", error_msg).unwrap_or_else(|e| eprintln!("Failed to emit wait error: {}", e));
                    }
                }
            });

            Ok(()) // Return immediately after spawning
        }
        Err(e) => {
            let error_msg = format!("Failed to spawn Workspace Snap Agent command '{:?}': {}", command_str, e);
            eprintln!("{}", error_msg);
            Err(error_msg)
        }
    }
}


// --- Tauri Main Setup ---
fn main() {
    // Create system tray menu
    let quit = CustomMenuItem::new("quit".to_string(), "Quit Projects Hub").accelerator("CmdOrCtrl+Q");
    let hide = CustomMenuItem::new("hide".to_string(), "Hide Window");
    let show = CustomMenuItem::new("show".to_string(), "Show Window");
    let tray_menu = SystemTrayMenu::new()
        .add_item(show)
        .add_item(hide)
        .add_native_item(SystemTrayMenuItem::Separator)
        .add_item(quit);

    let system_tray = SystemTray::new().with_menu(tray_menu);

    tauri::Builder::default()
        .manage(AppState { // Example state
            backend_url: Mutex::new("http://localhost:8000".to_string()),
        })
        .system_tray(system_tray)
        .on_system_tray_event(|app_handle, event| match event {
            SystemTrayEvent::LeftClick { .. } => {
                 if let Some(window) = app_handle.get_window("main") {
                    let _ = window.show();
                    let _ = window.set_focus();
                 }
            }
             SystemTrayEvent::MenuItemClick { id, .. } => {
                match id.as_str() {
                    "quit" => {
                        println!("Quit requested from tray.");
                        app_handle.exit(0); // Use app_handle to exit
                    }
                    "hide" => {
                         println!("Hide requested from tray.");
                         if let Some(window) = app_handle.get_window("main") {
                            window.hide().unwrap_or_else(|e| eprintln!("Failed to hide window: {}", e));
                        }
                    }
                     "show" => {
                          println!("Show requested from tray.");
                         if let Some(window) = app_handle.get_window("main") {
                            window.show().unwrap_or_else(|e| eprintln!("Failed to show window: {}", e));
                            window.unminimize().unwrap_or_else(|e| eprintln!("Failed to unminimize window: {}", e)); // Ensure not minimized
                            window.set_focus().unwrap_or_else(|e| eprintln!("Failed to focus window: {}", e));
                         }
                    }
                    _ => {}
                }
            }
            _ => {}
        })
        .on_window_event(|event| match event.event() {
            // Hide window instead of closing on request
            tauri::WindowEvent::CloseRequested { api, .. } => {
                println!("Close requested, hiding window instead.");
                event.window().hide().unwrap_or_else(|e| eprintln!("Failed to hide window on close request: {}", e));
                api.prevent_close();
            }
             tauri::WindowEvent::Focused(focused) => {
                  // Useful for debugging focus issues
                  println!("Window focus changed: {}", focused);
             }
            _ => {}
        })
        .setup(|app| {
            // Ensure the main window is visible on initial startup
             if let Some(window) = app.get_window("main") {
                 println!("Showing main window on setup.");
                 let _ = window.show();
                 let _ = window.set_focus();
             } else {
                 eprintln!("Error: Could not get main window handle during setup.");
             }

            // Example Global Shortcut (requires feature flag in tauri.conf.json)
            // Need to enable "global-shortcut" feature for this
            /*
            #[cfg(feature = "global-shortcut")]
            {
                let handle = app.handle();
                app.global_shortcut_manager()
                    .register("CmdOrCtrl+Shift+P", move || {
                        println!("Global shortcut CmdOrCtrl+Shift+P triggered");
                        // Emit event to frontend to open command palette
                        if let Err(e) = handle.emit_all("trigger-command-palette", ()) {
                             eprintln!("Failed to emit trigger-command-palette event: {}", e);
                        }
                    })
                    .unwrap_or_else(|e| eprintln!("Failed to register global shortcut: {}", e));
            }
            */

            Ok(())
        })
        .invoke_handler(tauri::generate_handler![
            trigger_workspace_snap // Register the command
            // Add other Tauri commands here later
        ])
        .build(tauri::generate_context!()) // Use build() instead of run() for async runtime
        .expect("error while building tauri application")
        .run(|_app_handle, event| match event {
             // Handle run events if needed, e.g., exit requested
             tauri::RunEvent::ExitRequested { api, .. } => {
                  println!("Tauri run loop requesting exit.");
                  api.prevent_exit(); // Prevent default exit if needed
             }
             _ => {}
        });
}

================
File: tauri/src/main.tsx
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './styles/index.css';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </React.StrictMode>,
);

================
File: tauri/src/pages/Dashboard.tsx
================
import React, { useState, useEffect, useRef, useCallback } from 'react';
import axios from 'axios';
import { format, formatDistanceToNow } from 'date-fns';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';
// Import Dnd types and backend
import { DndProvider, useDrag, useDrop, DropTargetMonitor } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { XYCoord } from 'dnd-core'; // Type needed for clientOffset
// Import Tauri API functions
import { invoke } from '@tauri-apps/api/core';
import { appDataDir, join } from '@tauri-apps/api/path';
// Import shared event bus
import { eventBus } from '../App';

// --- Interfaces ---
interface FocusSummary {
  date: string;
  totalTime: number;
  appBreakdown: {
    appName: string;
    timeSpent: number;
    percentage: number;
    exePath?: string;
  }[];
  screenshots: string[];
  keywords: string[];
  focusScore?: number;
  distractionEvents?: number;
  meetingTime?: number;
}

interface Alarm {
  id: string;
  title: string;
  days: number;
  time?: string;
  thresholds: {
    green: number;
    amber: number;
    red: number;
  };
}

interface PinnedDoc {
  id: string; // Use path as ID
  title: string;
  path: string;
  lastModified?: string;
}

interface DragItem {
  type: string;
  id: string;
  index: number;
}

// --- Constants ---
const ItemTypes = {
  PINNED_DOC: 'pinnedDoc',
};

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FA8072', '#E066FF', '#FF5733', '#C70039']; // Extended colors

// --- PinnedDocCard Component ---
const PinnedDocCard: React.FC<{
  doc: PinnedDoc;
  index: number;
  moveDoc: (dragIndex: number, hoverIndex: number) => void;
  togglePin: (id: string) => void;
}> = ({ doc, index, moveDoc, togglePin }) => {
  const ref = useRef<HTMLDivElement>(null);

  const [{ isDragging }, drag] = useDrag({
    type: ItemTypes.PINNED_DOC,
    item: (): DragItem => ({ type: ItemTypes.PINNED_DOC, id: doc.id, index }),
    collect: (monitor) => ({ isDragging: monitor.isDragging() }),
  });

  const [, drop] = useDrop<DragItem, void, unknown>({
    accept: ItemTypes.PINNED_DOC,
    hover: (item: DragItem, monitor: DropTargetMonitor<DragItem, void>) => {
      if (!ref.current) return;
      const dragIndex = item.index;
      const hoverIndex = index;
      if (dragIndex === hoverIndex) return;
      const hoverBoundingRect = ref.current.getBoundingClientRect();
      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;
      const clientOffset = monitor.getClientOffset();
      // Ensure clientOffset is not null and assert type
      if (!clientOffset) return;
      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;
      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return;
      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return;
      moveDoc(dragIndex, hoverIndex);
      item.index = hoverIndex; // Mutate monitor item for performance
    },
  });

  drag(drop(ref));
  const opacity = isDragging ? 0.4 : 1;

  const getFileIcon = (path: string = '') => {
    const extension = path.split('.').pop()?.toLowerCase();
    switch (extension) {
      case 'md': return '📄'; case 'pdf': return '📕'; case 'doc': case 'docx': return '📘';
      case 'xls': case 'xlsx': return '📗'; case 'ppt': case 'pptx': return '📙';
      case 'jpg': case 'jpeg': case 'png': case 'gif': case 'svg': return '🖼️';
      case 'zip': case 'rar': case '7z': return '📦'; case 'exe': return '⚙️'; case 'txt': return '📝';
      case 'yaml': case 'json': return '{..}'; case 'html': return '</>'; case 'css': return '#{}';
      case 'js': case 'ts': return ' J S '; case 'jsx': case 'tsx': return '<R>';
      default: return '📎';
    }
  };

  return (
    <div
      ref={ref}
      className="card doc-card bg-white dark:bg-gray-800 shadow rounded p-3 flex items-start gap-3 border border-gray-200 dark:border-gray-700 cursor-grab active:cursor-grabbing transition-opacity"
      style={{ opacity }}
      title={`Path: ${doc.path}\nLast Modified: ${doc.lastModified ? format(new Date(doc.lastModified), 'Pp') : 'N/A'}`}
    >
      <div className="doc-icon text-xl text-gray-500 dark:text-gray-400 mt-1 flex-shrink-0">
        {getFileIcon(doc.path)}
      </div>
      <div className="doc-content flex-1 overflow-hidden">
        <h3 className="doc-title text-sm font-medium text-gray-800 dark:text-gray-100 truncate">{doc.title || doc.path}</h3>
        <p className="doc-path text-xs text-gray-500 dark:text-gray-400 truncate">{doc.path}</p>
        {doc.lastModified && (
          <p className="doc-last-modified text-xs text-gray-500 dark:text-gray-400 mt-1">
            Modified: {formatDistanceToNow(new Date(doc.lastModified), { addSuffix: true })}
          </p>
        )}
      </div>
      <div className="doc-actions ml-auto flex-shrink-0">
        <button
          className={`pin-button text-lg ${true ? 'text-yellow-500 hover:text-yellow-400' : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'}`}
          onClick={() => togglePin(doc.id)}
          title="Unpin document"
          aria-label="Unpin document"
        >
          ★
        </button>
      </div>
    </div>
  );
};

// --- Empty PinnedDocCard ---
const EmptyDocCard: React.FC = () => {
  return (
    <div className="empty-doc-card flex items-center justify-center h-20 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded text-sm text-gray-500 dark:text-gray-400">
      No documents pinned.
    </div>
  );
};


// --- Dashboard Component ---
const Dashboard: React.FC = () => {
  const [focusSummary, setFocusSummary] = useState<FocusSummary | null>(null);
  const [alarms, setAlarms] = useState<Alarm[]>([]);
  const [pinnedDocs, setPinnedDocs] = useState<PinnedDoc[]>([]);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [loadingFocus, setLoadingFocus] = useState(true);
  const [loadingAlarms, setLoadingAlarms] = useState(true);
  const [loadingPinnedDocs, setLoadingPinnedDocs] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [userHubPath, setUserHubPath] = useState<string | null>(null); // Store resolved user's Hub path

  const today = format(new Date(), 'yyyy-MM-dd');

  // --- Effect for determining Hub Path ---
  useEffect(() => {
      const findHubPath = async () => {
           try {
                // FIXME: Replace this with a reliable method to get/store the user-chosen ProjectsHub path.
                // Using AppDataDir is just a temporary placeholder.
                const dataDir = await appDataDir();
                const hubPath = await join(dataDir, 'ProjectsHub'); // Assumes folder name
                // Could add a check here to see if hubPath actually exists
                setUserHubPath(hubPath);
                console.log("User Hub Path (determined example):", hubPath);
           } catch (e) {
                console.error("Critical: Failed to determine Hub path:", e);
                setError("Could not determine ProjectsHub data location. Some features may not work.");
           }
      };
      findHubPath();
  }, []); // Run once on mount

  // --- Data Fetching Logic ---
  const fetchDashboardData = useCallback(async () => {
    // Reset loading states and error
    setLoadingFocus(true);
    setLoadingAlarms(true);
    setLoadingPinnedDocs(true);
    setError(null);
    let errorsAccumulator: string[] = [];

    const fetchFocus = async () => {
        try {
            const res = await axios.get(`http://localhost:8000/focus/summary?date=${today}`);
            setFocusSummary(res.data);
        } catch (err) {
            console.error('Error fetching focus summary:', err);
            setFocusSummary(null);
            if (!axios.isAxiosError(err) || err.response?.status !== 404) {
                errorsAccumulator.push('Failed to load focus summary.');
            }
        } finally { setLoadingFocus(false); }
    };

    const fetchAlarms = async () => {
         try {
            const res = await axios.get('http://localhost:8000/alarms');
            setAlarms(res.data.alarms || []);
        } catch (err) {
            console.error('Error fetching alarms:', err);
            setAlarms([]);
            errorsAccumulator.push('Failed to load alarms.');
        } finally { setLoadingAlarms(false); }
    };

    const fetchPinnedDocs = async () => {
        // TODO: Replace with actual API call, e.g., GET /meta/pinned_docs
        try {
             console.log("Fetching pinned docs (using mock data)...");
             await new Promise(resolve => setTimeout(resolve, 200)); // Simulate delay
             const mockDocsData = [
                 { id: 'Project-A/docs/overview.md', title: 'Project Overview', path: 'Project-A/docs/overview.md', lastModified: '2025-04-18T14:30:00Z' },
                 { id: 'Project-B/docs/meeting-notes.md', title: 'Meeting Notes', path: 'Project-B/docs/meeting-notes.md', lastModified: '2025-04-15T10:00:00Z' },
                 { id: 'Project-A/docs/roadmap.md', title: 'Development Roadmap', path: 'Project-A/docs/roadmap.md', lastModified: '2025-04-16T09:15:00Z' },
             ];
             setPinnedDocs(mockDocsData);
        } catch (err) {
             console.error('Error fetching pinned docs:', err);
             setPinnedDocs([]);
             errorsAccumulator.push('Failed to load pinned documents.');
        } finally { setLoadingPinnedDocs(false); }
    };

    // Run fetches concurrently
    await Promise.all([fetchFocus(), fetchAlarms(), fetchPinnedDocs()]);

    if (errorsAccumulator.length > 0) {
         setError(errorsAccumulator.join(' ')); // Combine errors
    }

  }, [today]); // Depend only on today's date

  // --- Effect for Initial Fetch and WebSocket Listeners ---
  useEffect(() => {
    fetchDashboardData(); // Initial fetch

    const handleUpdate = (message: any) => {
         console.log(`Dashboard received WS message: ${message?.type}, refetching data...`);
         fetchDashboardData(); // Refetch all dashboard data on relevant updates
    };

    const listeners = [
         eventBus.on('alarms_updated', handleUpdate),
         eventBus.on('focus_summary_updated', (msg: any) => { if (msg.date === today) handleUpdate(msg); }),
         eventBus.on('meta_updated', handleUpdate), // Assume pinned docs are in meta
         // Listen for workspace snap events to potentially update UI feedback
         eventBus.on('workspace-snap-started', () => console.log("Workspace snap started...")),
         eventBus.on('workspace-snap-success', () => console.log("Workspace snap success!")),
         eventBus.on('workspace-snap-error', (errMsg) => { console.error("Workspace snap error:", errMsg); setError(`Workspace Snap failed: ${errMsg}`); }),
         eventBus.on('workspace-snap-stderr', (line) => console.warn("[Snap Agent STDERR]", line)),
    ];

    return () => listeners.forEach(unsub => unsub()); // Cleanup all listeners

  }, [fetchDashboardData, today]); // Re-run if fetch function or date changes


  // --- Helper Functions ---
  const getAlarmStatus = (alarm: Alarm): 'red' | 'amber' | 'green' => {
    const daysLeft = alarm.days;
    if (daysLeft <= alarm.thresholds.red) return 'red';
    if (daysLeft <= alarm.thresholds.amber) return 'amber';
    return 'green';
  };

   const getAlarmStatusClasses = (status: string) => {
     switch (status) {
      case 'red': return 'border-l-red-500 bg-red-50 dark:bg-red-900/30 dark:border-l-red-400 text-red-800 dark:text-red-200';
      case 'amber': return 'border-l-yellow-500 bg-yellow-50 dark:bg-yellow-700/20 dark:border-l-yellow-400 text-yellow-800 dark:text-yellow-100';
      case 'green': return 'border-l-green-500 bg-green-50 dark:bg-green-900/30 dark:border-l-green-400 text-green-800 dark:text-green-200';
      default: return 'border-l-gray-500 bg-gray-50 dark:bg-gray-800/30 text-gray-700 dark:text-gray-300';
    }
  };

  const formatTime = (seconds: number = 0): string => {
    if (seconds < 60) return `${Math.round(seconds)}s`;
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.round(seconds % 60);
    if (minutes < 60) return `${minutes}m ${remainingSeconds}s`;
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return `${hours}h ${remainingMinutes}m`;
  };

  // --- Action Handlers ---
   const handleStartWorkspace = async () => {
        if (!userHubPath) {
             setError("Cannot start workspace: ProjectsHub path not determined.");
             console.error("Cannot start workspace: userHubPath is null");
             return;
        }
        try {
            const configPath = await join(userHubPath, 'workspace_layout.json');
            // TODO: Get current project path dynamically if needed by args
            // const currentProjectPath = await join(userHubPath, 'Project-A');

            console.log(`Invoking trigger_workspace_snap with config: ${configPath}`);
            setError(null); // Clear previous errors before invoking
             await invoke('trigger_workspace_snap', {
                 configPath: configPath,
                 // projectPath: currentProjectPath // Pass if needed
             });
             console.log("trigger_workspace_snap invoke called.");
             // UI feedback can listen to emitted events ('workspace-snap-started', etc.)
        } catch (error) {
             console.error('Failed to trigger Workspace Snap invoke:', error);
             setError(`Failed to start workspace: ${error}`);
        }
    };

  const handleQuickAction = (action: string) => {
      console.log(`Quick action clicked: ${action}`);
      if (action === 'start-workspace') {
           handleStartWorkspace();
      } else if (action === 'cmd-palette') {
           // TODO: Trigger kbar programmatically
           // Example: kbarActions.toggle();
           console.log("Trigger command palette - Placeholder");
      } else if (action === 'new-project') {
           // TODO: Open new project modal or navigate
           console.log("New project - Placeholder");
      }
  }

  const moveDoc = useCallback((dragIndex: number, hoverIndex: number) => {
    setPinnedDocs((prevDocs) => {
        const newDocs = [...prevDocs];
        const [draggedDoc] = newDocs.splice(dragIndex, 1);
        newDocs.splice(hoverIndex, 0, draggedDoc);
        // TODO: API Call - Persist this new order
        console.log("New pinned doc order (needs saving via API):", newDocs.map(d => d.path));
        // axios.put('/meta/pinned_docs', { paths: newDocs.map(d => d.path) });
        return newDocs;
    });
  }, []);

  const togglePin = (id: string) => {
    // TODO: API Call - Remove doc from pinned list in 00-meta.yaml
    console.log('Toggle pin for doc (needs API call):', id);
    // Optimistically remove from UI
    setPinnedDocs(prev => prev.filter(doc => doc.id !== id));
  };


  // --- Render ---
  return (
    <div className="dashboard-container p-4 md:p-6 lg:p-8 w-full text-gray-900 dark:text-gray-100 h-full flex flex-col">
      {/* Header */}
      <div className="header flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-3 flex-shrink-0">
        <h1 className="text-2xl font-bold">Dashboard</h1>
        <div className="tabs flex border-b border-gray-200 dark:border-gray-700" role="tablist">
          <button
            className={`tab px-4 py-2 text-sm font-medium border-b-2 ${activeTab === 'dashboard' ? 'border-blue-500 text-blue-600 dark:text-blue-400 dark:border-blue-400' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-600'}`}
            onClick={() => setActiveTab('dashboard')}
            role="tab" aria-selected={activeTab === 'dashboard'} aria-controls="dashboard-panel" id="dashboard-tab"
          >
            Overview
          </button>
          <button
            className={`tab px-4 py-2 text-sm font-medium border-b-2 ${activeTab === 'focus-report' ? 'border-blue-500 text-blue-600 dark:text-blue-400 dark:border-blue-400' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-600'}`}
            onClick={() => setActiveTab('focus-report')}
            role="tab" aria-selected={activeTab === 'focus-report'} aria-controls="focus-report-panel" id="focus-report-tab"
          >
            Focus Report ({today})
          </button>
        </div>
      </div>

      {/* Global Error Display */}
      {error && (
         <div className="error-state text-center text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-4 rounded border border-red-300 dark:border-red-700 mb-4 flex-shrink-0">{error}</div>
      )}

      {/* Tab Content Area */}
      <div className="flex-1 overflow-y-auto pb-4 pr-1">
        {activeTab === 'dashboard' ? (
            <div role="tabpanel" id="dashboard-panel" aria-labelledby="dashboard-tab">
            {/* Quick Actions */}
            <div className="quick-action-bar flex flex-wrap gap-3 mb-6">
                 <button className="quick-action-button text-sm bg-blue-500 hover:bg-blue-600 text-white px-3 py-1.5 rounded shadow flex items-center gap-2 transition duration-150 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed" onClick={() => handleQuickAction('start-workspace')} data-shortcut="⌘ W" title="Start Workspace Layout (Cmd+W)" disabled={!userHubPath}>
                <span>🖥️</span> Start Workspace
                </button>
                 <button className="quick-action-button text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 px-3 py-1.5 rounded shadow flex items-center gap-2 border border-gray-300 dark:border-gray-600 transition duration-150 ease-in-out" onClick={() => handleQuickAction('cmd-palette')} data-shortcut="⌘ K" title="Open Command Palette (Cmd+K)">
                <span>⌨️</span> Command Palette
                </button>
                 <button className="quick-action-button text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 px-3 py-1.5 rounded shadow flex items-center gap-2 border border-gray-300 dark:border-gray-600 transition duration-150 ease-in-out" onClick={() => handleQuickAction('new-project')} data-shortcut="⌘ N" title="Create New Project (Cmd+N)">
                <span>➕</span> New Project
                </button>
            </div>

            {/* Main Grid */}
            <div className="dashboard-grid grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Alarms Section */}
                <div className="dashboard-section">
                    <h2 className="section-title text-lg font-semibold mb-3">Alarms</h2>
                    <div className="alarms-container space-y-3">
                        {loadingAlarms ? ( <div className="text-gray-500 dark:text-gray-400 text-sm p-4 text-center">Loading alarms...</div> )
                        : alarms.length > 0 ? (
                            alarms.map((alarm) => {
                                const status = getAlarmStatus(alarm);
                                return (
                                <div key={alarm.id} className={`card alarm-card shadow rounded p-3 border-l-4 ${getAlarmStatusClasses(status)}`} title={`Thresholds: R<=${alarm.thresholds.red}, A<=${alarm.thresholds.amber}, G>${alarm.thresholds.amber}`}>
                                    <div className="flex justify-between items-center">
                                        <h3 className="text-base font-medium flex items-center gap-2">
                                            <span className={`alarm-icon text-lg`}>⏰</span>
                                            {alarm.title}
                                        </h3>
                                        <span className="text-base font-bold flex-shrink-0 ml-2">{alarm.days}d</span>
                                    </div>
                                    {alarm.time && <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 ml-7">Due at {alarm.time}</p>}
                                </div>
                                )
                            })
                        ) : (
                            <div className="empty-state text-sm text-gray-500 dark:text-gray-400 p-4 border border-dashed border-gray-300 dark:border-gray-600 rounded text-center">No active alarms.</div>
                        )}
                    </div>
                </div>

                {/* Pinned Docs Section */}
                <div className="dashboard-section">
                    <h2 className="section-title text-lg font-semibold mb-3">Pinned Documents</h2>
                    <DndProvider backend={HTML5Backend}>
                        <div className="pinned-docs-container space-y-2">
                        {loadingPinnedDocs ? ( <div className="text-gray-500 dark:text-gray-400 text-sm p-4 text-center">Loading pinned docs...</div> )
                        : pinnedDocs.length > 0 ? (
                            pinnedDocs.map((doc, index) => (
                            <PinnedDocCard key={doc.id} doc={doc} index={index} moveDoc={moveDoc} togglePin={togglePin} />
                            ))
                        ) : ( <EmptyDocCard /> )}
                        </div>
                    </DndProvider>
                </div>
            </div>
            </div>
        ) : ( // Focus Report Tab
            <div className="focus-report space-y-6" role="tabpanel" id="focus-report-panel" aria-labelledby="focus-report-tab">
            {loadingFocus ? (
                <div className="loading-state text-center text-gray-500 dark:text-gray-400 py-10">Loading focus report...</div>
            ) : focusSummary ? (
                <>
                    {/* Stats Card */}
                    <div className="card focus-stats-card bg-white dark:bg-gray-800 shadow rounded p-4 border border-gray-200 dark:border-gray-700">
                        <h2 className="text-xl font-semibold mb-4">Focus Summary: {today}</h2>
                        <div className="focus-stats grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                            <div className="stat p-2 rounded bg-gray-50 dark:bg-gray-700/50">
                                <span className="stat-label block text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider">Total Time</span>
                                <span className="stat-value block text-lg font-bold">{formatTime(focusSummary.totalTime)}</span>
                            </div>
                            <div className="stat p-2 rounded bg-gray-50 dark:bg-gray-700/50">
                                <span className="stat-label block text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider">Focus Score</span>
                                <span className="stat-value block text-lg font-bold">{focusSummary.focusScore ?? 'N/A'}%</span>
                            </div>
                            <div className="stat p-2 rounded bg-gray-50 dark:bg-gray-700/50">
                                <span className="stat-label block text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider">Meetings</span>
                                <span className="stat-value block text-lg font-bold">{formatTime(focusSummary.meetingTime)}</span>
                            </div>
                            <div className="stat p-2 rounded bg-gray-50 dark:bg-gray-700/50">
                                <span className="stat-label block text-xs text-gray-500 dark:text-gray-400 uppercase tracking-wider">Window Switches</span>
                                <span className="stat-value block text-lg font-bold">{focusSummary.distractionEvents ?? 'N/A'}</span>
                            </div>
                        </div>
                    </div>

                    {/* Chart Card */}
                    {focusSummary.appBreakdown && focusSummary.appBreakdown.length > 0 ? (
                         <div className="card focus-chart-card bg-white dark:bg-gray-800 shadow rounded p-4 border border-gray-200 dark:border-gray-700">
                            <h3 className="text-lg font-semibold mb-1">Application Breakdown</h3>
                            <div className="focus-chart h-72 w-full">
                                <ResponsiveContainer width="100%" height="100%">
                                <PieChart>
                                    <Pie
                                        data={focusSummary.appBreakdown} cx="50%" cy="50%"
                                        innerRadius="50%" outerRadius="80%"
                                        fill="#8884d8" paddingAngle={2} dataKey="timeSpent" nameKey="appName"
                                        labelLine={false}
                                        // Label only shown for larger slices to prevent overlap
                                        label={({ name, percent }) => percent > 0.03 ? `${name} ${(percent * 100).toFixed(0)}%` : ''}
                                    >
                                    {focusSummary.appBreakdown.map((entry, index) => ( <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} /> ))}
                                    </Pie>
                                    <Tooltip formatter={(value: number, name: string) => [`${formatTime(value)}`, name]} />
                                    <Legend layout="horizontal" verticalAlign="bottom" align="center" iconSize={10} wrapperStyle={{fontSize: '11px', marginTop: '10px'}} />
                                </PieChart>
                                </ResponsiveContainer>
                            </div>
                        </div>
                    ) : (
                         <div className="card bg-white dark:bg-gray-800 shadow rounded p-4 border border-gray-200 dark:border-gray-700 text-center text-sm text-gray-500 dark:text-gray-400">No application usage data logged for today.</div>
                    )}


                    {/* Screenshots Card */}
                    <div className="card focus-screenshots-card bg-white dark:bg-gray-800 shadow rounded p-4 border border-gray-200 dark:border-gray-700">
                        <h3 className="text-lg font-semibold mb-3">Recent Screenshots</h3>
                        <div className="screenshot-gallery grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3">
                            {focusSummary.screenshots && focusSummary.screenshots.length > 0 ? (
                                focusSummary.screenshots.slice(-10).reverse().map((screenshot, index) => ( // Show last 10 newest first
                                <div key={index} className="screenshot-item aspect-video rounded overflow-hidden shadow border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-700 relative group">
                                    {/* Use the backend endpoint */}
                                    <img
                                        src={`http://localhost:8000/focus_logs/${screenshot}`}
                                        alt={`Screenshot ${index + 1} from ${today}`}
                                        loading="lazy"
                                        className="w-full h-full object-contain" // Use contain to see whole image
                                        title={screenshot}
                                        onError={(e) => { // Basic placeholder on error
                                            e.currentTarget.style.display = 'none';
                                            const parent = e.currentTarget.parentElement;
                                            if (parent && !parent.querySelector('.placeholder-text')) {
                                                 const placeholder = document.createElement('div');
                                                 placeholder.className = 'placeholder-text absolute inset-0 flex items-center justify-center text-xs text-gray-400 dark:text-gray-500 bg-gray-200 dark:bg-gray-600';
                                                 placeholder.textContent = 'Load Error';
                                                 parent.appendChild(placeholder);
                                            }
                                        }}
                                    />
                                     <div className="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white text-xs p-1 truncate opacity-0 group-hover:opacity-100 transition-opacity duration-200">{screenshot}</div>
                                </div>
                                ))
                            ) : (
                                <div className="empty-state col-span-full text-sm text-gray-500 dark:text-gray-400 p-4 border border-dashed border-gray-300 dark:border-gray-600 rounded">No screenshots captured today.</div>
                            )}
                        </div>
                    </div>
                     {/* Keywords Card */}
                     {focusSummary.keywords && focusSummary.keywords.length > 0 && (
                        <div className="card focus-keywords-card bg-white dark:bg-gray-800 shadow rounded p-4 border border-gray-200 dark:border-gray-700">
                             <h3 className="text-lg font-semibold mb-3">Keywords Detected (OCR)</h3>
                             <div className="flex flex-wrap gap-1">
                                 {focusSummary.keywords.slice(0, 50).map((keyword, index) => ( // Limit displayed keywords
                                     <span key={index} className="text-xs bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200 px-2 py-0.5 rounded">{keyword}</span>
                                 ))}
                                  {focusSummary.keywords.length > 50 && <span className="text-xs text-gray-400">...</span>}
                             </div>
                        </div>
                    )}
                </>
            ) : ( // No focus summary available
                <div className="empty-state flex-1 text-center text-gray-500 dark:text-gray-400 py-10 p-8 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
                    <p>No focus data available for {today}.</p>
                    <p className="text-sm mt-2">Ensure the Focus Monitor agent is running and generating summaries.</p>
                </div>
            )}
            </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;

================
File: tauri/src/pages/Documents.tsx
================
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import axios from 'axios';
import ReactMarkdown from 'react-markdown';
// Import syntax highlighter and a style
// Note: Ensure 'react-syntax-highlighter' and '@types/react-syntax-highlighter' are installed
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'; // Example dark theme
// Import GFM plugin for tables, etc.
import remarkGfm from 'remark-gfm';
import { useLocation } from 'react-router-dom';
import { eventBus } from '../App'; // Import shared event bus

// --- Interfaces ---
interface Project {
  id: string;
  title: string;
}

interface DocMetadata {
  id: string; // Use path as ID
  title: string;
  path: string;
  project_id: string;
}

interface Document extends DocMetadata {
  content: string;
  lastModified?: string; // Optional, maybe from file system later
}

// --- Component ---
const Documents: React.FC = () => {
  // --- State ---
  const location = useLocation();
  const passedProjectId = location.state?.projectId;

  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProject, setSelectedProject] = useState<string | null>(passedProjectId || null);
  const [docList, setDocList] = useState<DocMetadata[]>([]);
  const [selectedDocPath, setSelectedDocPath] = useState<string | null>(null);
  const [selectedDoc, setSelectedDoc] = useState<Document | null>(null);
  const [editMode, setEditMode] = useState(false);
  const [editContent, setEditContent] = useState('');
  const [loadingProjects, setLoadingProjects] = useState(true);
  const [loadingList, setLoadingList] = useState(false);
  const [loadingContent, setLoadingContent] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);


  // --- Data Fetching Callbacks ---
  const fetchProjects = useCallback(async () => {
    setLoadingProjects(true);
    setError(null); // Clear previous errors
    try {
        const response = await axios.get('http://localhost:8000/projects');
        const fetchedProjects = response.data.projects || [];
        setProjects(fetchedProjects);
        // Set default selected project only if none is selected/passed and projects exist
        if (fetchedProjects.length > 0 && !selectedProject) {
            setSelectedProject(fetchedProjects[0].id);
        } else if (fetchedProjects.length === 0) {
            setSelectedProject(null); // No projects, clear selection
        }
    } catch (err) {
        console.error('Error fetching projects:', err);
        setError('Failed to load projects.');
        setProjects([]);
        setSelectedProject(null);
    } finally {
        setLoadingProjects(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Run once or when selectedProject logic might need re-evaluation (though unlikely here)

  const fetchDocList = useCallback(async (projectId: string | null) => {
      if (!projectId) {
          setDocList([]);
          setLoadingList(false);
          return; // No project selected
      }
      setLoadingList(true);
      setError(null); // Clear errors specific to doc list loading
      // Clear selected document details when project changes
      setSelectedDoc(null);
      setSelectedDocPath(null);
      setEditMode(false);
      try {
          const response = await axios.get(`http://localhost:8000/documents?project_id=${projectId}`);
          setDocList(response.data.documents || []);
      } catch (err) {
          console.error('Error fetching document list:', err);
          setError(`Failed to load documents for project.`);
          setDocList([]);
      } finally {
          setLoadingList(false);
      }
  }, []); // No dependencies needed, uses passed projectId

  const fetchDocContent = useCallback(async (docPath: string | null) => {
       if (!docPath) {
           setSelectedDoc(null); // Clear doc content if path is cleared
           setLoadingContent(false);
           return;
       }
       setLoadingContent(true);
       setError(null); // Clear errors specific to content loading
       setEditMode(false); // Always reset to preview mode when loading new doc
       try {
           // Path is already relative from the list endpoint
           // No need to encode if using path parameter in FastAPI (`{path:path}`)
           const response = await axios.get(`/files/content/${docPath}`);

           // Find matching metadata from the list (mostly for title)
           const docMetadata = docList.find(d => d.path === docPath);
           const title = docMetadata?.title || docPath.split('/').pop()?.replace('.md', '') || 'Document';

           setSelectedDoc({
               id: docPath, // path is the ID
               title: title,
               path: docPath,
               project_id: selectedProject || 'unknown', // Should have selectedProject
               content: response.data.content,
           });
           setEditContent(response.data.content); // Sync edit buffer
       } catch (err) {
           console.error('Error fetching document content:', err);
           setError(`Failed to load document: ${docPath.split('/').pop()}`);
           setSelectedDoc(null);
           setSelectedDocPath(null); // Reset path if content load fails
       } finally {
           setLoadingContent(false);
       }
  }, [docList, selectedProject]); // Depend on docList to find title, selectedProject for context


  // --- Effects ---
  useEffect(() => {
      fetchProjects(); // Fetch projects on initial mount
  }, [fetchProjects]);

  useEffect(() => {
      fetchDocList(selectedProject); // Fetch doc list when project changes
  }, [selectedProject, fetchDocList]);

  useEffect(() => {
      fetchDocContent(selectedDocPath); // Fetch content when doc path changes
  }, [selectedDocPath, fetchDocContent]);

  useEffect(() => {
      // Listen for WebSocket document updates for the current project
      const handleDocUpdate = (message: any) => {
          // Ensure message has project_id and path
          if (!message?.project_id || !message?.path) return;

          if (message.project_id === selectedProject) {
              console.log(`Document update received via WS for project ${selectedProject}: ${message.path} (${message.event})`);
              // Refetch the list to get potential new/deleted files
              fetchDocList(selectedProject);

              // If the updated doc is the one currently being viewed/edited
              if (selectedDocPath === message.path) {
                   console.warn(`Currently viewed document ${selectedDocPath} was modified externally (${message.event}).`);
                   // More sophisticated handling needed here:
                   // - If 'deleted', clear selection and show message.
                   // - If 'modified' and in edit mode with unsaved changes, show conflict warning.
                   // - If 'modified' and in preview mode, silently reload or show notification.
                   if (message.event === 'deleted') {
                        setError(`Document '${message.path.split('/').pop()}' was deleted externally.`);
                        setSelectedDocPath(null); // Clear selection
                        setSelectedDoc(null);
                   } else if (editMode && selectedDoc && editContent !== selectedDoc.content) {
                         setError(`Conflict: Document '${message.path.split('/').pop()}' was modified externally while you were editing. Please save your changes elsewhere and reload.`);
                         // Disable saving? Or force reload? For now, just show error.
                   } else {
                         // Silently reload content if in preview mode or no local changes
                         setError(`Note: Document '${message.path.split('/').pop()}' was updated externally. Reloaded.`);
                         fetchDocContent(selectedDocPath);
                   }
              }
          }
      };
      const unsubscribe = eventBus.on('document_updated', handleDocUpdate);
      return () => unsubscribe(); // Cleanup listener
  }, [selectedProject, selectedDocPath, editMode, editContent, selectedDoc, fetchDocList, fetchDocContent]); // Dependencies needed for conflict check


  // --- Style Injection Effect ---
  useEffect(() => {
    // Inject basic prose styles if Tailwind typography plugin isn't used
    const styleId = 'markdown-prose-styles';
    if (!document.getElementById(styleId)) {
        const style = document.createElement('style');
        style.id = styleId;
        style.textContent = `
        .prose h1 { font-size: 1.6em; margin-bottom: 0.6em; padding-bottom: 0.2em; border-bottom: 1px solid #e5e7eb; }
        .prose h2 { font-size: 1.4em; margin-bottom: 0.5em; padding-bottom: 0.2em; border-bottom: 1px solid #e5e7eb; }
        .dark .prose h1, .dark .prose h2 { border-bottom-color: #374151; }
        .prose h3 { font-size: 1.2em; margin-bottom: 0.4em; }
        .prose p { margin-bottom: 1em; line-height: 1.65; }
        .prose ul, .prose ol { margin-left: 1.8em; margin-bottom: 1em; }
        .prose li { margin-bottom: 0.4em; }
        .prose li > p { margin-bottom: 0.4em; } /* Reduce paragraph margin inside lists */
        .prose strong { font-weight: 600; }
        .prose em { font-style: italic; }
        .prose blockquote { border-left: 4px solid #d1d5db; padding-left: 1em; margin-left: 0; margin-bottom: 1em; color: #4b5563; font-style: italic; }
        .dark .prose blockquote { border-left-color: #4b5563; color: #9ca3af; }
        .prose hr { border-top: 1px solid #e5e7eb; margin: 2em 0; }
        .dark .prose hr { border-top-color: #374151; }
        .prose a { color: #2563eb; text-decoration: none; }
        .prose a:hover { text-decoration: underline; }
        .dark .prose a { color: #60a5fa; }
        .prose code:not(pre>code) { background-color: rgba(229, 231, 235, 0.7); dark:bg-gray-700 px-1.5 py-0.5 rounded text-sm; font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
        .prose pre { background-color: #1f2937; color: #d1d5db; padding: 1em; border-radius: 8px; overflow-x: auto; margin-bottom: 1.2em; font-size: 0.9em;}
        .prose pre code { background-color: transparent; padding: 0; border-radius: 0; font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
        .dark .prose code:not(pre>code) { background-color: rgba(55, 65, 81, 0.9); color: #e5e7eb; }
        .dark .prose pre { background-color: #374155; color: #d1d5db; }
        .prose table { width: auto; border-collapse: collapse; margin-bottom: 1em; }
        .prose th, .prose td { border: 1px solid #d1d5db; padding: 0.5em 0.8em; }
        .dark .prose th, .dark .prose td { border-color: #4b5563; }
        .prose thead th { background-color: #f3f4f6; font-weight: 600; }
        .dark .prose thead th { background-color: #374151; }
        `;
        document.head.append(style);
    }
    // Optional cleanup function if needed
    // return () => { document.getElementById(styleId)?.remove(); };
  }, []); // Run once on mount


  // --- Event Handlers ---
  const handleDocSelect = (doc: DocMetadata) => {
    if (isSaving) {
        alert("Please wait for the current save operation to complete.");
        return;
    }
    if (editMode && selectedDoc && editContent !== selectedDoc.content) {
        if (!window.confirm("You have unsaved changes. Discard them and switch document?")) {
            return;
        }
    }
    setSelectedDocPath(doc.path); // This will trigger fetchDocContent effect
  };

  const handleProjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    // Check for unsaved changes before switching project
    if (editMode && selectedDoc && editContent !== selectedDoc.content) {
        if (!window.confirm("You have unsaved changes. Discard them and switch project?")) {
            e.target.value = selectedProject || ''; // Reset dropdown if user cancels
            return;
        }
    }
    setSelectedProject(e.target.value || null);
  };

  const handleEditToggle = () => {
    if (!selectedDoc) return;
    if (editMode && editContent !== selectedDoc.content) {
        if (!window.confirm("Discard unsaved changes?")) {
            return;
        }
    }
    setEditMode(!editMode);
    // Reset edit buffer to original content when switching back to preview
    if (!editMode) {
        setEditContent(selectedDoc?.content || '');
        setError(null); // Clear potential conflict errors when switching back
    }
  };

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setEditContent(e.target.value);
  };

  const handleSave = async () => {
    if (!selectedDoc || !selectedDocPath || isSaving) return;
    setIsSaving(true);
    setError(null); // Clear previous errors
    try {
      // Path is relative, no encoding needed if FastAPI handles it
      await axios.put(`/files/content/${selectedDocPath}`, {
        content: editContent,
      });
      // Update local state immediately (WS might also trigger refetch, but this is faster UI feedback)
      setSelectedDoc({ ...selectedDoc, content: editContent });
      setEditMode(false); // Switch back to preview after successful save
      // Optionally show success notification
    } catch (err) {
      console.error('Error saving document:', err);
      setError(`Failed to save document: ${selectedDoc.title}. Please try again.`);
      // Keep edit mode open and content as is on error
    } finally {
      setIsSaving(false);
    }
  };

  const handleCreateDocument = () => {
     // TODO: Implement document creation modal/form
    console.log('Create document clicked - Placeholder');
  };

  // Memoize Markdown components for syntax highlighting performance
  const markdownComponents = useMemo(() => ({
      code({ node, inline, className, children, ...props }: any) {
          const match = /language-(\w+)/.exec(className || '');
          return !inline && match ? (
          <SyntaxHighlighter
              style={vscDarkPlus} // Use the imported theme
              language={match[1]}
              PreTag="div"
              {...props}
          >
              {String(children).replace(/\n$/, '')}
          </SyntaxHighlighter>
          ) : (
          // Inline code style
          <code className={`inline-code bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded text-sm font-mono ${className || ''}`} {...props}>
              {children}
          </code>
          );
      },
      // Add other custom renderers here if needed (e.g., custom links, images)
  }), []);


  // --- Render Logic ---
  return (
    <div className="documents-container flex flex-col h-full p-4 md:p-6 lg:p-8 w-full overflow-hidden">
      {/* Header */}
      <div className="header flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4 flex-shrink-0">
         <div className="flex items-center gap-4 flex-wrap">
            <h1 className="text-2xl font-bold text-gray-800 dark:text-gray-100">Documents</h1>
            <select
                className="project-select p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                value={selectedProject || ''}
                onChange={handleProjectChange}
                disabled={loadingProjects || projects.length === 0}
                aria-label="Select Project"
            >
               {loadingProjects ? ( <option value="">Loading projects...</option> )
               : projects.length > 0 ? (
                <>
                    <option value="">Select project...</option>
                    {projects.map((project) => ( <option key={project.id} value={project.id}> {project.title} </option> ))}
                </>
               ) : ( <option value="">No projects available</option> )}
            </select>
        </div>
        <button
          className="quick-action-button bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow flex items-center gap-2 transition duration-150 ease-in-out text-sm disabled:opacity-50 disabled:cursor-not-allowed"
          onClick={handleCreateDocument}
          disabled={!selectedProject}
          title={!selectedProject ? "Select a project first" : "Create a new document"}
        >
           <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" /></svg>
          <span>New Document</span>
        </button>
      </div>

      {/* Error Display Area */}
      {error && (
          <div className="error-state text-center text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-3 rounded border border-red-300 dark:border-red-700 mb-4 text-sm flex-shrink-0">{error}</div>
      )}

      {/* Main Content Layout */}
      <div className="documents-layout flex flex-1 gap-6 overflow-hidden">
          {/* Sidebar (Doc List) */}
          <div className="documents-sidebar w-1/4 lg:w-1/5 flex-shrink-0 border-r border-gray-200 dark:border-gray-700 pr-4 flex flex-col">
              <h2 className="text-base font-semibold mb-3 text-gray-700 dark:text-gray-200 flex-shrink-0 sticky top-0 bg-gray-50 dark:bg-gray-900 py-1 z-10">
                  Project Docs {selectedProject ? `(${projects.find(p=>p.id === selectedProject)?.title || selectedProject})` : ''}
              </h2>
              <div className="flex-1 overflow-y-auto">
                  {loadingList ? ( <div className="text-gray-500 dark:text-gray-400 text-sm p-4 text-center">Loading...</div> )
                  : !selectedProject ? ( <div className="text-gray-500 dark:text-gray-400 text-sm p-4 text-center">Select a project</div> )
                  : docList.length > 0 ? (
                      <div className="documents-list space-y-1">
                          {docList.map((doc) => (
                              <div
                                  key={doc.id}
                                  className={`document-item p-2 rounded cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-100 ${selectedDocPath === doc.path ? 'bg-blue-100 dark:bg-blue-900/50' : ''}`}
                                  onClick={() => handleDocSelect(doc)}
                                  role="button" tabIndex={0}
                                  onKeyDown={(e) => e.key === 'Enter' && handleDocSelect(doc)}
                                  title={doc.path}
                              >
                                  <h3 className={`document-title text-sm truncate ${selectedDocPath === doc.path ? 'font-semibold text-blue-800 dark:text-blue-200' : 'text-gray-800 dark:text-gray-100'}`}>{doc.title}</h3>
                              </div>
                          ))}
                      </div>
                  ) : (
                      <div className="empty-state text-sm text-gray-500 dark:text-gray-400 p-4 border border-dashed border-gray-300 dark:border-gray-600 rounded mt-2 text-center">
                          No documents found in this project.
                      </div>
                  )}
              </div>
          </div>

          {/* Content Area (Editor/Viewer) */}
          <div className="document-content flex-1 flex flex-col overflow-hidden">
              {!selectedProject ? ( <div className="flex-1 flex items-center justify-center text-gray-500 dark:text-gray-400">Select a project to see documents</div> )
              : !selectedDocPath ? (
                  <div className="empty-state flex-1 flex items-center justify-center text-center text-gray-500 dark:text-gray-400 p-8 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
                      <p>Select a document from the list to view or edit</p>
                  </div>
              ) : loadingContent ? (
                  <div className="flex-1 flex items-center justify-center text-gray-500 dark:text-gray-400">Loading document...</div>
              ) : selectedDoc ? (
                  <>
                      {/* Document Header */}
                      <div className="document-header flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
                          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-100 truncate mb-2 sm:mb-0" title={selectedDoc.path}>{selectedDoc.title}</h2>
                          <div className="document-actions flex gap-2">
                              <button
                                  className="action-button text-sm px-3 py-1 border border-gray-300 dark:border-gray-600 rounded hover:bg-gray-100 dark:hover:bg-gray-700 disabled:opacity-50"
                                  onClick={handleEditToggle}
                                  disabled={isSaving}
                                  title={editMode ? "Switch to Preview Mode" : "Switch to Edit Mode"}
                              >
                                  {editMode ? 'Preview' : 'Edit'}
                              </button>
                              {editMode && (
                                  <button
                                      className="action-button save-button text-sm px-3 py-1 bg-blue-500 hover:bg-blue-600 text-white rounded disabled:opacity-50 disabled:cursor-not-allowed"
                                      onClick={handleSave}
                                      disabled={isSaving || editContent === selectedDoc.content}
                                      title={isSaving ? "Saving..." : (editContent === selectedDoc.content ? "No changes to save" : "Save changes")}
                                  >
                                      {isSaving ? 'Saving...' : 'Save'}
                                  </button>
                              )}
                          </div>
                      </div>

                      {/* Editor/Preview Area */}
                      <div className={`editor-area flex-1 overflow-hidden ${editMode ? 'flex flex-col md:flex-row gap-4' : ''}`}>
                          {editMode ? (
                              <>
                                  <textarea
                                      className="markdown-input w-full md:w-1/2 h-64 md:h-auto p-3 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 font-mono text-sm focus:outline-none focus:ring-1 focus:ring-blue-500 resize-none overflow-y-auto flex-1" // Use flex-1 for height
                                      value={editContent}
                                      onChange={handleContentChange}
                                      disabled={isSaving}
                                      aria-label="Markdown Editor"
                                      placeholder="Start writing Markdown..."
                                  />
                                  <div className="markdown-preview-container w-full md:w-1/2 h-64 md:h-auto border border-gray-300 dark:border-gray-600 rounded bg-gray-50 dark:bg-gray-900/50 overflow-y-auto flex-1">
                                     <div className="markdown-preview p-3 prose dark:prose-invert prose-sm max-w-none">
                                        <ReactMarkdown remarkPlugins={[remarkGfm]} components={markdownComponents}>
                                            {editContent || '*Preview will appear here*'}
                                        </ReactMarkdown>
                                     </div>
                                  </div>
                              </>
                          ) : (
                             <div className="markdown-view flex-1 overflow-y-auto p-3 prose dark:prose-invert prose-sm max-w-none">
                                  <ReactMarkdown remarkPlugins={[remarkGfm]} components={markdownComponents}>
                                      {selectedDoc.content || '*Document is empty*'}
                                  </ReactMarkdown>
                             </div>
                          )}
                      </div>
                  </>
              ) : ( // selectedDoc is null after loading attempt (error case)
                   <div className="flex-1 flex items-center justify-center text-red-500 dark:text-red-400">
                     Document not found or failed to load.
                  </div>
              )}
          </div>
      </div>
    </div>
  );
};

export default Documents;

================
File: tauri/src/pages/Projects.tsx
================
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { eventBus } from '../App'; // Import eventBus

interface Project {
  id: string;
  title: string;
  status: string;
  tags: string[];
  due?: string;
  description?: string;
  team?: { name: string; role: string }[];
}

const Projects: React.FC = () => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const fetchProjects = async () => {
    // Avoid setting loading if already loading
    if (!loading) setLoading(true);
    setError(null);
    try {
      const response = await axios.get('http://localhost:8000/projects');
      setProjects(response.data.projects || []);
    } catch (err) {
      console.error('Error fetching projects:', err);
      setError('Failed to load projects. Please check if the backend is running.');
      setProjects([]); // Clear projects on error
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProjects(); // Initial fetch

    // Listen for WebSocket messages indicating project updates
    const handleProjectUpdate = (message: any) => {
       console.log('Project data potentially changed via WebSocket, refetching...', message);
       fetchProjects(); // Refetch the entire list on any project change
    };

    const unsubscribe = eventBus.on('project_updated', handleProjectUpdate);

    // Cleanup listener on component unmount
    return () => unsubscribe();

  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Empty dependency array ensures setup runs once

  const getStatusColor = (status: string = 'unknown') => {
    switch (status.toLowerCase()) {
      case 'active':
        return 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200';
      case 'planning':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200';
      case 'on hold':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-700/40 dark:text-yellow-100';
      case 'completed':
      case 'done':
        return 'bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-300'; // Use distinct gray
      default:
        return 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-300'; // Lighter gray for unknown
    }
  };

  const handleCreateProject = () => {
    // TODO: Implement project creation modal/form
    console.log('Create project clicked - Placeholder');
    // Example: Trigger modal open state
  };

  const navigateToTasks = (projectId: string) => {
     navigate('/tasks', { state: { projectId: projectId } });
  };

  const navigateToDocs = (projectId: string) => {
     navigate('/documents', { state: { projectId: projectId } });
  };

  return (
    <div className="projects-container p-4 md:p-6 lg:p-8 w-full h-full flex flex-col">
      <div className="header flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
        <h1 className="text-2xl font-bold text-gray-800 dark:text-gray-100">Projects</h1>
        <button
          className="quick-action-button bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow flex items-center gap-2 transition duration-150 ease-in-out text-sm"
          onClick={handleCreateProject}
          title="Create a new project"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
          </svg>
          <span>New Project</span>
        </button>
      </div>

      {error && (
         <div className="error-state text-center text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-4 rounded border border-red-300 dark:border-red-700 mb-4">{error}</div>
      )}

      {loading ? (
        <div className="loading-state flex-1 flex items-center justify-center text-gray-500 dark:text-gray-400">Loading projects...</div>
      ) : (
        <div className="projects-grid flex-1 overflow-y-auto pb-4 pr-1"> {/* Allow vertical scroll */}
             {projects.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">
                    {projects.map((project) => (
                    <div key={project.id} className="card project-card bg-white dark:bg-gray-800 shadow-md rounded-lg p-4 flex flex-col justify-between border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow duration-200">
                        <div>
                            <div className="flex justify-between items-start mb-2">
                                <h2 className="text-lg font-semibold text-gray-900 dark:text-white truncate" title={project.title}>{project.title}</h2>
                                <span className={`status-badge text-xs font-medium px-2.5 py-0.5 rounded-full whitespace-nowrap ${getStatusColor(project.status)}`}>
                                    {project.status || 'Unknown'}
                                </span>
                            </div>
                            {project.description && (
                                <p className="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-3" title={project.description}> {/* Increased line clamp */}
                                    {project.description}
                                </p>
                            )}
                            <div className="project-meta text-xs text-gray-500 dark:text-gray-400 mb-3">
                                {project.due && (
                                <span className="due-date block">Due: {project.due}</span>
                                )}
                            </div>
                            <div className="tags-container flex flex-wrap gap-1 mb-4">
                                {project.tags?.map((tag, index) => (
                                <span key={index} className="tag text-xs bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-200 px-2 py-0.5 rounded">{tag}</span>
                                ))}
                            </div>
                        </div>
                        <div className="project-actions mt-auto flex justify-end gap-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                        <button className="action-button text-sm text-blue-600 dark:text-blue-400 hover:underline" onClick={() => navigateToTasks(project.id)} title="View Tasks">Tasks</button>
                        <button className="action-button text-sm text-blue-600 dark:text-blue-400 hover:underline" onClick={() => navigateToDocs(project.id)} title="View Documents">Docs</button>
                        {/* Add Edit button functionality later */}
                        {/* <button className="action-button text-sm text-gray-600 dark:text-gray-400 hover:underline">Edit</button> */}
                        </div>
                    </div>
                    ))}
                </div>
             ) : (
                <div className="empty-state col-span-full text-center text-gray-500 dark:text-gray-400 p-8 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg mt-4">
                <p className="mb-4">No projects found. Create your first project to get started.</p>
                <button
                    className="quick-action-button bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow flex items-center gap-2 transition duration-150 ease-in-out mx-auto text-sm"
                    onClick={handleCreateProject}
                >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
                    </svg>
                    <span>Create Project</span>
                </button>
                </div>
            )}
        </div>
      )}
    </div>
  );
};

export default Projects;

================
File: tauri/src/pages/Tasks.tsx
================
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import axios from 'axios';
// Import react-beautiful-dnd components and types
// Ensure @types/react-beautiful-dnd is installed (`npm i --save-dev @types/react-beautiful-dnd`)
import {
    DragDropContext,
    Droppable,
    Draggable,
    DropResult,
    DroppableProvided,
    DroppableStateSnapshot,
    DraggableProvided,
    DraggableStateSnapshot
} from 'react-beautiful-dnd';
import { useLocation } from 'react-router-dom'; // To potentially get passed projectId
import { eventBus } from '../App'; // Import shared event bus

// --- Interfaces ---
interface Task {
  id: string;
  title: string;
  description?: string;
  status: string; // 'todo', 'in-progress', 'done' (or potentially others)
  priority?: string; // 'high', 'medium', 'low'
  due?: string;
  assigned_to?: string; // Added from YAML example
}

interface Project {
  id: string;
  title: string;
}

// --- Constants ---
const COLUMN_IDS = {
    TODO: 'todo',
    IN_PROGRESS: 'in-progress',
    DONE: 'done',
};

// Map internal IDs to display titles
const columnTitles = {
    [COLUMN_IDS.TODO]: 'To Do',
    [COLUMN_IDS.IN_PROGRESS]: 'In Progress',
    [COLUMN_IDS.DONE]: 'Done',
};

// --- Component ---
const Tasks: React.FC = () => {
  const location = useLocation(); // Get location object to check for passed state
  const passedProjectId = location.state?.projectId; // Get projectId if passed via navigate

  // --- State ---
  const [tasks, setTasks] = useState<Task[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [selectedProject, setSelectedProject] = useState<string | null>(passedProjectId || null);
  const [loadingProjects, setLoadingProjects] = useState(true);
  const [loadingTasks, setLoadingTasks] = useState(false); // Start false, true when fetching tasks
  const [error, setError] = useState<string | null>(null);

  // --- Data Fetching Callbacks ---
  const fetchProjects = useCallback(async () => {
    setLoadingProjects(true);
    setError(null);
    try {
      const response = await axios.get('http://localhost:8000/projects');
      const fetchedProjects = response.data.projects || [];
      setProjects(fetchedProjects);
      // Set default selected project only if none is selected/passed AND projects exist
      if (fetchedProjects.length > 0 && !selectedProject) {
        setSelectedProject(fetchedProjects[0].id);
      } else if (fetchedProjects.length === 0) {
        setSelectedProject(null); // No projects available
      }
    } catch (err) {
      console.error('Error fetching projects:', err);
      setError('Failed to load projects.');
      setProjects([]);
      setSelectedProject(null);
    } finally {
      setLoadingProjects(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Run once on mount generally

  const fetchTasks = useCallback(async (projectId: string | null) => {
      if (!projectId) {
          setTasks([]); // Clear tasks if no project is selected
          setLoadingTasks(false);
          return;
      }
      setLoadingTasks(true);
      setError(null); // Clear previous task errors
      try {
        const response = await axios.get(`http://localhost:8000/tasks?project_id=${projectId}`);
        const fetchedTasks = response.data.tasks || [];

        // Ensure status matches column IDs and default if invalid/missing
        const correctedTasks = fetchedTasks.map((task: Task) => {
            // Normalize status: lowercase, replace space/underscore with hyphen
            const normalizedStatus = task.status?.toLowerCase().replace(/[\s_]/g, '-') || COLUMN_IDS.TODO;
            // Ensure it's a valid column ID, otherwise default to TODO
            const validStatus = COLUMN_IDS[normalizedStatus.toUpperCase() as keyof typeof COLUMN_IDS] || COLUMN_IDS.TODO;
            return { ...task, status: validStatus };
        });
        setTasks(correctedTasks);
      } catch (err) {
        console.error(`Error fetching tasks for project ${projectId}:`, err);
        // Don't show error if it's just 404 (tasks file doesn't exist yet)
        if (axios.isAxiosError(err) && err.response?.status === 404) {
            setTasks([]); // Set empty tasks, it's not an error state
            setError(null);
        } else {
            setError(`Failed to load tasks for the selected project.`);
            setTasks([]); // Clear tasks on other errors
        }
      } finally {
        setLoadingTasks(false);
      }
    }, []); // fetchTasks itself doesn't depend on external state


  // --- Effects ---
  useEffect(() => {
    fetchProjects(); // Fetch projects on initial mount
  }, [fetchProjects]);

  useEffect(() => {
    fetchTasks(selectedProject); // Fetch tasks whenever selected project changes
  }, [selectedProject, fetchTasks]);

  useEffect(() => {
     // Listen for WebSocket messages indicating task updates for the *currently selected* project
     const handleTasksUpdate = (message: any) => {
         if (message?.project_id && message.project_id === selectedProject) {
             console.log(`Tasks updated via WebSocket for current project ${selectedProject}, refetching...`);
             fetchTasks(selectedProject); // Refetch tasks for the current project
         }
     };
     const unsubscribe = eventBus.on('tasks_updated', handleTasksUpdate);
     return () => unsubscribe(); // Cleanup listener on unmount or when selectedProject changes
  }, [selectedProject, fetchTasks]); // Re-subscribe if selectedProject changes


  // --- Event Handlers ---
  const handleProjectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedProject(e.target.value || null); // Set to null if the "Select project" option is chosen
  };

  const handleDragEnd = async (result: DropResult) => {
    const { source, destination, draggableId } = result;

    // 1. Check if drop is valid
    if (!destination) return; // Dropped outside a droppable area
    if (source.droppableId === destination.droppableId && source.index === destination.index) return; // Dropped in the same place

    const taskToMove = tasks.find(task => task.id === draggableId);
    if (!taskToMove || !selectedProject) return; // Task or project not found/selected

    // 2. Optimistic UI Update
    // Create a new array with the task moved to the new status
    // Note: This simple update only changes the status property.
    // For visual reordering within the list *before* backend confirmation,
    // you'd need a more complex state update (e.g., managing tasks per column).
    const updatedTasksOptimistic = tasks.map(task =>
        task.id === draggableId
            ? { ...task, status: destination.droppableId }
            : task
    );
    setTasks(updatedTasksOptimistic); // Update UI immediately

    // 3. Call Backend API to persist the change
    try {
      setError(null); // Clear previous errors
      await axios.put(`http://localhost:8000/tasks/${selectedProject}`, {
        id: draggableId,
        status: destination.droppableId, // The ID of the column it was dropped into
      });
      // Success! The optimistic update is likely correct.
      // The WebSocket listener should ideally handle the final state confirmation by refetching,
      // preventing the need for a second refetch here unless WS fails.
      console.log(`Task ${draggableId} status updated to ${destination.droppableId} on backend.`);
    } catch (error) {
      console.error('Failed to update task status on backend:', error);
      setError('Failed to save task change. Reverting UI.');
      // Revert UI change on failure by refetching the last known good state
      // (Could also revert using the state before the optimistic update, but refetch is safer)
      fetchTasks(selectedProject);
    }
  };

  const handleCreateTask = () => {
    // TODO: Implement task creation modal/form
    // Should likely POST to a new endpoint like /tasks/{project_id}
    console.log('Create task clicked - Placeholder');
  };

  // --- Memoized Derived State ---
  // Group tasks by their status column ID for rendering
  const tasksByColumn = useMemo(() => {
      const columns: { [key: string]: Task[] } = {
          [COLUMN_IDS.TODO]: [],
          [COLUMN_IDS.IN_PROGRESS]: [],
          [COLUMN_IDS.DONE]: [],
      };
      tasks.forEach(task => {
          // Ensure task status is valid, default to TODO if not
          const columnId = task.status && COLUMN_IDS[task.status.toUpperCase() as keyof typeof COLUMN_IDS]
                             ? task.status
                             : COLUMN_IDS.TODO;
          columns[columnId].push(task);
      });
      // Optional: Sort tasks within each column (e.g., by priority, due date, title)
      // Object.values(columns).forEach(columnTasks => {
      //     columnTasks.sort((a, b) => a.title.localeCompare(b.title));
      // });
      return columns;
  }, [tasks]); // Recalculate only when the tasks array changes

  // --- Helper Functions ---
  const getPriorityClass = (priority?: string): string => {
    if (!priority) return 'border-l-gray-400 dark:border-l-gray-500'; // Neutral border
    switch (priority.toLowerCase()) {
      case 'high': return 'border-l-red-500';
      case 'medium': return 'border-l-yellow-400'; // Adjusted yellow
      case 'low': return 'border-l-blue-500';
      default: return 'border-l-gray-400 dark:border-l-gray-500';
    }
  };

  // --- Render ---
  return (
    <div className="tasks-container flex flex-col h-full p-4 md:p-6 lg:p-8 w-full overflow-hidden">
      {/* Header */}
      <div className="header flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4 flex-shrink-0">
        <div className="flex items-center gap-4 flex-wrap">
          <h1 className="text-2xl font-bold text-gray-800 dark:text-gray-100">Tasks</h1>
          <select
            className="project-select p-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
            value={selectedProject || ''}
            onChange={handleProjectChange}
            disabled={loadingProjects || projects.length === 0}
            aria-label="Select Project"
          >
            {loadingProjects ? ( <option value="">Loading projects...</option> )
            : projects.length > 0 ? (
              <>
                <option value="">Select project...</option>
                {projects.map((project) => (
                  <option key={project.id} value={project.id}> {project.title} </option>
                ))}
              </>
            ) : ( <option value="">No projects available</option> )}
          </select>
        </div>
        <button
          className="quick-action-button bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow flex items-center gap-2 transition duration-150 ease-in-out text-sm disabled:opacity-50 disabled:cursor-not-allowed"
          onClick={handleCreateTask}
          disabled={!selectedProject || loadingTasks} // Disable if no project selected or tasks are loading
          title={!selectedProject ? "Select a project first" : "Create a new task"}
        >
           <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" /></svg>
          <span>New Task</span>
        </button>
      </div>

      {/* Error Display */}
      {error && (
         <div className="error-state text-center text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-3 rounded border border-red-300 dark:border-red-700 mb-4 text-sm flex-shrink-0">{error}</div>
      )}

      {/* Kanban Board Area */}
      <div className="flex-1 overflow-hidden"> {/* Container for scrolling */}
        {!selectedProject && !loadingProjects ? (
          <div className="empty-state h-full flex items-center justify-center text-center text-gray-500 dark:text-gray-400 p-8 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
            <p>Please select a project to view tasks.</p>
          </div>
        ) : loadingTasks ? (
           <div className="loading-state h-full flex items-center justify-center text-gray-500 dark:text-gray-400">Loading tasks...</div>
        ) : (
          <DragDropContext onDragEnd={handleDragEnd}>
            <div className="kanban-board h-full grid grid-cols-1 md:grid-cols-3 gap-4"> {/* Grid layout */}
              {Object.entries(columnTitles).map(([columnId, title]) => (
                <div key={columnId} className="kanban-column bg-gray-100 dark:bg-gray-800 rounded-lg p-3 flex flex-col h-full overflow-hidden"> {/* Column styling */}
                  {/* Column Header */}
                  <div className="kanban-column-header flex justify-between items-center mb-3 px-1 flex-shrink-0">
                    <h2 className="font-semibold text-gray-700 dark:text-gray-200">{title}</h2>
                    <span className="task-count text-xs bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-300 rounded-full px-2 py-0.5">
                      {tasksByColumn[columnId]?.length || 0}
                    </span>
                  </div>
                  {/* Droppable Area */}
                  <Droppable droppableId={columnId}>
                    {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        // Styling for the droppable area, changes when dragging over
                        className={`kanban-tasks flex-1 space-y-3 overflow-y-auto p-1 rounded-md transition-colors duration-200 ${snapshot.isDraggingOver ? 'bg-blue-50 dark:bg-blue-900/20' : 'bg-transparent'}`}
                      >
                        {/* Display tasks or empty message */}
                        {tasksByColumn[columnId]?.length === 0 && !snapshot.isDraggingOver && (
                           <div className="text-center text-xs text-gray-400 dark:text-gray-500 pt-4 italic">Drop tasks here</div>
                        )}
                        {/* Map and render draggable tasks */}
                        {tasksByColumn[columnId]?.map((task, index) => (
                          <Draggable key={task.id} draggableId={task.id} index={index}>
                            {(provided: DraggableProvided, snapshot: DraggableStateSnapshot) => (
                              <div
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                                // Styling for the draggable card, changes when dragging
                                className={`kanban-card bg-white dark:bg-gray-700 rounded shadow p-3 border-l-4 cursor-grab active:cursor-grabbing ${getPriorityClass(task.priority)} ${snapshot.isDragging ? 'shadow-lg scale-105 ring-2 ring-blue-400' : 'shadow-sm'}`}
                                style={{...provided.draggableProps.style}} // Required style overrides from library
                                title={task.description || task.title} // Tooltip for description
                              >
                                {/* Task Content */}
                                <h3 className="task-title font-medium text-sm text-gray-900 dark:text-white mb-1">{task.title}</h3>
                                {task.description && (
                                  <p className="task-description text-xs text-gray-600 dark:text-gray-400 mb-2 line-clamp-2">{task.description}</p>
                                )}
                                <div className="task-meta flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
                                   {task.due && (
                                      <span className="task-due flex items-center gap-1" title={`Due: ${task.due}`}>
                                           <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>
                                           {task.due}
                                       </span>
                                   )}
                                   {task.assigned_to && (
                                       <span className="task-assignee flex items-center gap-1 ml-auto pl-2" title={`Assigned to ${task.assigned_to}`}> {/* Push assignee to right */}
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" /></svg>
                                            {task.assigned_to.split(' ')[0]} {/* Show first name only */}
                                        </span>
                                   )}
                                </div>
                              </div>
                            )}
                          </Draggable>
                        ))}
                        {provided.placeholder} {/* Placeholder for space while dragging */}
                      </div>
                    )}
                  </Droppable>
                </div>
              ))}
            </div>
          </DragDropContext>
        )}
      </div>
    </div>
  );
};

export default Tasks;

================
File: tauri/src/styles/App.css
================
.app-container {
  display: flex;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
}

.sidebar {
  width: var(--sidebar-width);
  height: 100%;
  background-color: var(--bg-surface);
  color: var(--text-primary);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
}

.main-content {
  flex: 1;
  overflow-y: auto;
  padding: 2rem 1rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  max-width: var(--max-content-width);
  margin: 0 auto;
}

.activity-feed {
  width: var(--feed-width);
  height: 100%;
  background-color: var(--bg-surface);
  border-left: 1px solid var(--border-subtle);
  padding: 1rem;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 0.625rem;
  color: var(--text-primary);
}

/* Main content styling */
.main-content {
  background-color: var(--bg-primary);
  color: var(--text-primary);
}

/* Navigation icon styling */
.nav-icon {
  color: var(--text-muted);
}

.nav-item.active .nav-icon {
  color: var(--accent-primary);
}

/* Light mode styles */
@media (prefers-color-scheme: light) {
  /* Styles for light mode if needed */
}

.header {
  height: var(--header-height);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 1rem;
  border-bottom: 1px solid rgba(226, 232, 240, 0.2);
}

/* Top bar tabs */
.tabs {
  display: flex;
  gap: 1rem;
}

.tab {
  font-size: var(--font-size-sm);
  font-weight: 600;
  padding: 0.5rem 1rem;
  border-bottom: 2px solid transparent;
  cursor: pointer;
  transition: all 0.15s ease;
}

.tab.active {
  border-bottom-color: var(--accent-primary);
  color: var(--accent-primary);
}

.tab:hover:not(.active) {
  border-bottom-color: var(--border-subtle);
}

.quick-action-bar {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.quick-action-button {
  padding: 0.5rem 1rem;
  background-color: transparent;
  color: var(--accent-primary);
  border: 1px solid var(--accent-primary);
  border-radius: 0.25rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 500;
  position: relative;
  transition: all 0.15s ease, transform 0.15s ease;
}

.quick-action-button:first-child {
  background-color: var(--accent-primary);
  color: var(--text-primary);
}

.quick-action-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.quick-action-button:active {
  transform: translateY(0);
}

.quick-action-button:hover::after {
  content: attr(data-shortcut);
  position: absolute;
  bottom: -30px;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: var(--font-size-xs);
  white-space: nowrap;
  z-index: 10;
}

.card {
  background-color: var(--bg-card);
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  padding: 1rem;
  margin-bottom: 1rem;
  transition: all 0.15s ease;
  color: var(--text-primary);
  border: 1px solid var(--border-subtle);
}

.alarm-card {
  border-left: 4px solid;
  position: relative;
  border: 2px dashed var(--accent-warning);
  border-radius: 0.5rem;
}

.alarm-card.green {
  border-left-color: var(--success-color);
}

.alarm-card.amber {
  border-left-color: var(--warning-color);
}

.alarm-card.red {
  border-left-color: var(--danger-color);
}

.alarm-progress {
  height: 4px;
  background-color: #e2e8f0;
  border-radius: 2px;
  margin-top: 0.5rem;
  overflow: hidden;
}

.alarm-progress-bar {
  height: 100%;
  border-radius: 2px;
}

.alarm-progress-bar.green {
  background-color: var(--success-color);
}

.alarm-progress-bar.amber {
  background-color: var(--warning-color);
}

.alarm-progress-bar.red {
  background-color: var(--danger-color);
}

.alarm-icon {
  margin-right: 0.5rem;
}

.alarm-icon.green {
  color: var(--success-color);
}

.alarm-icon.amber {
  color: var(--warning-color);
}

.alarm-icon.red {
  color: var(--danger-color);
}

.nav-item {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 0.75rem 0.75rem 1.25rem;
  border-radius: 0.25rem;
  cursor: pointer;
  margin-bottom: 0.5rem;
  transition: background-color 0.2s;
  color: var(--text-muted);
}

.nav-item:hover {
  background-color: rgba(59, 130, 246, 0.1);
  color: var(--accent-primary-hover);
}

.nav-item.active {
  background-color: rgba(59, 130, 246, 0.2);
  color: var(--accent-primary);
}

.nav-item.active .nav-icon {
  color: var(--accent-primary);
}

.kanban-board {
  display: flex;
  gap: 1rem;
  overflow-x: auto;
  padding-bottom: 1rem;
}

.kanban-column {
  min-width: 300px;
  background-color: #f1f5f9;
  border-radius: 0.5rem;
  padding: 1rem;
}

.kanban-column-header {
  font-weight: 600;
  margin-bottom: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.kanban-card {
  background-color: white;
  border-radius: 0.25rem;
  padding: 0.75rem;
  margin-bottom: 0.75rem;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  cursor: grab;
}

.markdown-editor {
  display: flex;
  height: 100%;
  gap: 1rem;
}

.markdown-input {
  flex: 1;
  padding: 1rem;
  border: 1px solid #e2e8f0;
  border-radius: 0.25rem;
  font-family: 'Menlo', monospace;
  resize: none;
}

.markdown-preview {
  flex: 1;
  padding: 1rem;
  border: 1px solid #e2e8f0;
  border-radius: 0.25rem;
  overflow-y: auto;
}

/* Pinned documents */
.doc-card {
  position: relative;
  cursor: grab;
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.doc-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
}

.doc-card:hover .doc-actions {
  opacity: 1;
}

.doc-icon {
  font-size: 1.25rem;
  color: #6b7280;
  flex-shrink: 0;
}

.doc-content {
  flex: 1;
}

.doc-title {
  font-size: var(--font-size-sm);
  font-weight: 600;
  margin-bottom: 0.25rem;
}

.doc-path {
  font-size: var(--font-size-xs);
  color: #6b7280;
}

.doc-actions {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  opacity: 0;
  transition: opacity 0.2s;
  display: flex;
  gap: 0.5rem;
}

.doc-last-modified {
  font-size: var(--font-size-xs);
  color: #6b7280;
  margin-top: 0.5rem;
}

.pin-button {
  cursor: pointer;
  color: #6b7280;
}

.pin-button.pinned {
  color: var(--warning-color);
}

.empty-doc-card {
  border: 2px dashed #e2e8f0;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 80px;
  color: #6b7280;
  font-size: var(--font-size-sm);
}

.focus-report {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.focus-chart {
  height: 300px;
}

.screenshot-gallery {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

.screenshot-item {
  border-radius: 0.25rem;
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.screenshot-item img {
  width: 100%;
  height: auto;
  object-fit: cover;
}

/* Activity Feed */
.activity-item {
  position: relative;
  padding: 0.75rem;
  border-radius: 0.25rem;
  margin-bottom: 0.5rem;
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  background-color: var(--bg-card);
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  animation: fadeIn 0.3s ease-in-out;
  border: 1px solid var(--border-subtle);
  color: var(--text-primary);
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.activity-item.unread::before {
  content: '';
  position: absolute;
  top: 0.75rem;
  right: 0.75rem;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: var(--accent-primary);
}

.feed-date-header {
  position: sticky;
  top: 0;
  padding: 0.5rem 0;
  font-size: var(--font-size-xs);
  font-weight: 600;
  color: #6b7280;
  background-color: inherit;
  z-index: 10;
}

/* Sidebar header */
.sidebar-header h1 {
  font-size: var(--font-size-xl);
  letter-spacing: 4px;
}

/* ARIA live region */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

/* Accessibility */
:focus {
  outline: 2px solid var(--accent-primary);
  outline-offset: 2px;
}

@media (prefers-reduced-motion: reduce) {
  .card:hover,
  .quick-action-button:hover {
    transform: none !important;
    box-shadow: none !important;
  }
}

/* Dashboard sections */
.dashboard-section {
  margin-bottom: 1.5rem;
}

.section-title {
  font-size: var(--font-size-lg);
  font-weight: 600;
  margin-bottom: 1rem;
}

.dashboard-grid {
  display: grid;
  gap: 1.5rem;
}

/* Empty states */
.empty-state {
  padding: 2rem;
  text-align: center;
  color: #6b7280;
  border: 2px dashed #e2e8f0;
  border-radius: 0.5rem;
}

================
File: tauri/src/styles/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Layout */
  --sidebar-width: 240px;
  --header-height: 60px;
  --feed-width: 300px;
  --max-content-width: 1120px;
  
  /* Typography */
  --font-size-xs: 12px;
  --font-size-sm: 14px;
  --font-size-base: 16px;
  --font-size-lg: 18px;
  --font-size-xl: 20px;
  --font-size-2xl: 24px;
  
  /* Dark Theme Colors (Default) */
  --bg-primary: #0D1117;
  --bg-surface: #161B22;
  --bg-card: #1E2430;
  --border-subtle: #262C38;
  --accent-primary: #3B82F6;
  --accent-primary-hover: #60A5FA;
  --accent-warning: #F59E0B;
  --text-primary: #F1F5F9;
  --text-muted: #9CA3AF;
  --danger: #EF4444;
  
  /* Legacy variable names for compatibility */
  --primary-color: var(--accent-primary);
  --primary-color-hover: var(--accent-primary-hover);
  --primary-color-70: rgba(59, 130, 246, 0.7);
  --success-color: #10b981;
  --success-color-70: rgba(16, 185, 129, 0.7);
  --warning-color: var(--accent-warning);
  --warning-color-70: rgba(245, 158, 11, 0.7);
  --danger-color: var(--danger);
  --danger-color-70: rgba(239, 68, 68, 0.7);
  --background-color: var(--bg-primary);
  --text-color: var(--text-primary);
  
  /* Transitions */
  --transition-default: all 0.15s ease;
}

/* Light mode support */
@media (prefers-color-scheme: light) {
  :root {
    --bg-primary: #f9fafb;
    --bg-surface: #f1f5f9;
    --bg-card: #ffffff;
    --border-subtle: #e2e8f0;
    --text-primary: #1f2937;
    --text-muted: #6b7280;
    
    /* Legacy variable names for compatibility */
    --background-color: var(--bg-primary);
    --text-color: var(--text-primary);
  }
}

/* Reduced motion preference */
@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
    animation: none !important;
  }
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: var(--transition-default);
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--background-color);
  color: var(--text-color);
  font-size: var(--font-size-base);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* Focus outlines */
:focus {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

/* Semantic HTML elements */
nav, main, aside {
  display: block;
}

================
File: tauri/test/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: tauri/test/.vscode/extensions.json
================
{
  "recommendations": ["tauri-apps.tauri-vscode", "rust-lang.rust-analyzer"]
}

================
File: tauri/test/index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="/src/styles.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tauri App</title>
    <script type="module" src="/src/main.ts" defer></script>
  </head>

  <body>
    <main class="container">
      <h1>Welcome to Tauri</h1>

      <div class="row">
        <a href="https://vitejs.dev" target="_blank">
          <img src="/src/assets/vite.svg" class="logo vite" alt="Vite logo" />
        </a>
        <a href="https://tauri.app" target="_blank">
          <img
            src="/src/assets/tauri.svg"
            class="logo tauri"
            alt="Tauri logo"
          />
        </a>
        <a href="https://www.typescriptlang.org/docs" target="_blank">
          <img
            src="/src/assets/typescript.svg"
            class="logo typescript"
            alt="typescript logo"
          />
        </a>
      </div>
      <p>Click on the Tauri logo to learn more about the framework</p>

      <form class="row" id="greet-form">
        <input id="greet-input" placeholder="Enter a name..." />
        <button type="submit">Greet</button>
      </form>
      <p id="greet-msg"></p>
    </main>
  </body>
</html>

================
File: tauri/test/package.json
================
{
  "name": "test",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "tauri": "tauri"
  },
  "dependencies": {
    "@tauri-apps/api": "^2",
    "@tauri-apps/plugin-opener": "^2"
  },
  "devDependencies": {
    "@tauri-apps/cli": "^2",
    "vite": "^6.0.3",
    "typescript": "~5.6.2"
  }
}

================
File: tauri/test/README.md
================
# Tauri + Vanilla TS

This template should help get you started developing with Tauri in vanilla HTML, CSS and Typescript.

## Recommended IDE Setup

- [VS Code](https://code.visualstudio.com/) + [Tauri](https://marketplace.visualstudio.com/items?itemName=tauri-apps.tauri-vscode) + [rust-analyzer](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer)

================
File: tauri/test/src-tauri/.gitignore
================
# Generated by Cargo
# will have compiled files and executables
/target/

# Generated by Tauri
# will have schema files for capabilities auto-completion
/gen/schemas

================
File: tauri/test/src-tauri/build.rs
================
fn main() {
    tauri_build::build()
}

================
File: tauri/test/src-tauri/capabilities/default.json
================
{
  "$schema": "../gen/schemas/desktop-schema.json",
  "identifier": "default",
  "description": "Capability for the main window",
  "windows": ["main"],
  "permissions": [
    "core:default",
    "opener:default"
  ]
}

================
File: tauri/test/src-tauri/Cargo.toml
================
[package]
name = "test"
version = "0.1.0"
description = "A Tauri App"
authors = ["you"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# The `_lib` suffix may seem redundant but it is necessary
# to make the lib name unique and wouldn't conflict with the bin name.
# This seems to be only an issue on Windows, see https://github.com/rust-lang/cargo/issues/8519
name = "test_lib"
crate-type = ["staticlib", "cdylib", "rlib"]

[build-dependencies]
tauri-build = { version = "2", features = [] }

[dependencies]
tauri = { version = "2", features = [] }
tauri-plugin-opener = "2"
serde = { version = "1", features = ["derive"] }
serde_json = "1"

================
File: tauri/test/src-tauri/src/lib.rs
================
// Learn more about Tauri commands at https://tauri.app/develop/calling-rust/
#[tauri::command]
fn greet(name: &str) -> String {
    format!("Hello, {}! You've been greeted from Rust!", name)
}

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_opener::init())
        .invoke_handler(tauri::generate_handler![greet])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}

================
File: tauri/test/src-tauri/src/main.rs
================
// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

fn main() {
    test_lib::run()
}

================
File: tauri/test/src-tauri/tauri.conf.json
================
{
  "$schema": "https://schema.tauri.app/config/2",
  "productName": "test",
  "version": "0.1.0",
  "identifier": "test",
  "build": {
    "beforeDevCommand": "npm run dev",
    "devUrl": "http://localhost:1420",
    "beforeBuildCommand": "npm run build",
    "frontendDist": "../dist"
  },
  "app": {
    "withGlobalTauri": true,
    "windows": [
      {
        "title": "test",
        "width": 800,
        "height": 600
      }
    ],
    "security": {
      "csp": null
    }
  },
  "bundle": {
    "active": true,
    "targets": "all",
    "icon": [
      "icons/32x32.png",
      "icons/128x128.png",
      "icons/128x128@2x.png",
      "icons/icon.icns",
      "icons/icon.ico"
    ]
  }
}

================
File: tauri/test/src/assets/tauri.svg
================
<svg width="206" height="231" viewBox="0 0 206 231" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M143.143 84C143.143 96.1503 133.293 106 121.143 106C108.992 106 99.1426 96.1503 99.1426 84C99.1426 71.8497 108.992 62 121.143 62C133.293 62 143.143 71.8497 143.143 84Z" fill="#FFC131"/>
<ellipse cx="84.1426" cy="147" rx="22" ry="22" transform="rotate(180 84.1426 147)" fill="#24C8DB"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M166.738 154.548C157.86 160.286 148.023 164.269 137.757 166.341C139.858 160.282 141 153.774 141 147C141 144.543 140.85 142.121 140.558 139.743C144.975 138.204 149.215 136.139 153.183 133.575C162.73 127.404 170.292 118.608 174.961 108.244C179.63 97.8797 181.207 86.3876 179.502 75.1487C177.798 63.9098 172.884 53.4021 165.352 44.8883C157.82 36.3744 147.99 30.2165 137.042 27.1546C126.095 24.0926 114.496 24.2568 103.64 27.6274C92.7839 30.998 83.1319 37.4317 75.8437 46.1553C74.9102 47.2727 74.0206 48.4216 73.176 49.5993C61.9292 50.8488 51.0363 54.0318 40.9629 58.9556C44.2417 48.4586 49.5653 38.6591 56.679 30.1442C67.0505 17.7298 80.7861 8.57426 96.2354 3.77762C111.685 -1.01901 128.19 -1.25267 143.769 3.10474C159.348 7.46215 173.337 16.2252 184.056 28.3411C194.775 40.457 201.767 55.4101 204.193 71.404C206.619 87.3978 204.374 103.752 197.73 118.501C191.086 133.25 180.324 145.767 166.738 154.548ZM41.9631 74.275L62.5557 76.8042C63.0459 72.813 63.9401 68.9018 65.2138 65.1274C57.0465 67.0016 49.2088 70.087 41.9631 74.275Z" fill="#FFC131"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M38.4045 76.4519C47.3493 70.6709 57.2677 66.6712 67.6171 64.6132C65.2774 70.9669 64 77.8343 64 85.0001C64 87.1434 64.1143 89.26 64.3371 91.3442C60.0093 92.8732 55.8533 94.9092 51.9599 97.4256C42.4128 103.596 34.8505 112.392 30.1816 122.756C25.5126 133.12 23.9357 144.612 25.6403 155.851C27.3449 167.09 32.2584 177.598 39.7906 186.112C47.3227 194.626 57.153 200.784 68.1003 203.846C79.0476 206.907 90.6462 206.743 101.502 203.373C112.359 200.002 122.011 193.568 129.299 184.845C130.237 183.722 131.131 182.567 131.979 181.383C143.235 180.114 154.132 176.91 164.205 171.962C160.929 182.49 155.596 192.319 148.464 200.856C138.092 213.27 124.357 222.426 108.907 227.222C93.458 232.019 76.9524 232.253 61.3736 227.895C45.7948 223.538 31.8055 214.775 21.0867 202.659C10.3679 190.543 3.37557 175.59 0.949823 159.596C-1.47592 143.602 0.768139 127.248 7.41237 112.499C14.0566 97.7497 24.8183 85.2327 38.4045 76.4519ZM163.062 156.711L163.062 156.711C162.954 156.773 162.846 156.835 162.738 156.897C162.846 156.835 162.954 156.773 163.062 156.711Z" fill="#24C8DB"/>
</svg>

================
File: tauri/test/src/assets/typescript.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="512.000000pt" height="512.000000pt" viewBox="0 0 512.000000 512.000000"
 preserveAspectRatio="xMidYMid meet">

<g transform="translate(0.000000,512.000000) scale(0.100000,-0.100000)"
fill="#2D79C7" stroke="none">
<path d="M430 5109 c-130 -19 -248 -88 -325 -191 -53 -71 -83 -147 -96 -247
-6 -49 -9 -813 -7 -2166 l3 -2090 22 -65 c54 -159 170 -273 328 -323 l70 -22
2140 0 2140 0 66 23 c160 55 272 169 322 327 l22 70 0 2135 0 2135 -22 70
c-49 157 -155 265 -319 327 l-59 23 -2115 1 c-1163 1 -2140 -2 -2170 -7z
m3931 -2383 c48 -9 120 -26 160 -39 l74 -23 3 -237 c1 -130 0 -237 -2 -237 -3
0 -26 14 -53 30 -61 38 -197 84 -310 106 -110 20 -293 15 -368 -12 -111 -39
-175 -110 -175 -193 0 -110 97 -197 335 -300 140 -61 309 -146 375 -189 30
-20 87 -68 126 -107 119 -117 164 -234 164 -426 0 -310 -145 -518 -430 -613
-131 -43 -248 -59 -445 -60 -243 -1 -405 24 -577 90 l-68 26 0 242 c0 175 -3
245 -12 254 -9 9 -9 12 0 12 7 0 12 -4 12 -9 0 -17 139 -102 223 -138 136 -57
233 -77 382 -76 145 0 224 19 295 68 75 52 100 156 59 242 -41 84 -135 148
-374 253 -367 161 -522 300 -581 520 -23 86 -23 253 -1 337 73 275 312 448
682 492 109 13 401 6 506 -13z m-1391 -241 l0 -205 -320 0 -320 0 0 -915 0
-915 -255 0 -255 0 0 915 0 915 -320 0 -320 0 0 205 0 205 895 0 895 0 0 -205z"/>
</g>
</svg>

================
File: tauri/test/src/assets/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: tauri/test/src/main.ts
================
import { invoke } from "@tauri-apps/api/core";

let greetInputEl: HTMLInputElement | null;
let greetMsgEl: HTMLElement | null;

async function greet() {
  if (greetMsgEl && greetInputEl) {
    // Learn more about Tauri commands at https://tauri.app/develop/calling-rust/
    greetMsgEl.textContent = await invoke("greet", {
      name: greetInputEl.value,
    });
  }
}

window.addEventListener("DOMContentLoaded", () => {
  greetInputEl = document.querySelector("#greet-input");
  greetMsgEl = document.querySelector("#greet-msg");
  document.querySelector("#greet-form")?.addEventListener("submit", (e) => {
    e.preventDefault();
    greet();
  });
});

================
File: tauri/test/src/styles.css
================
.logo.vite:hover {
  filter: drop-shadow(0 0 2em #747bff);
}

.logo.typescript:hover {
  filter: drop-shadow(0 0 2em #2d79c7);
}
:root {
  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;
  font-size: 16px;
  line-height: 24px;
  font-weight: 400;

  color: #0f0f0f;
  background-color: #f6f6f6;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

.container {
  margin: 0;
  padding-top: 10vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: 0.75s;
}

.logo.tauri:hover {
  filter: drop-shadow(0 0 2em #24c8db);
}

.row {
  display: flex;
  justify-content: center;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

h1 {
  text-align: center;
}

input,
button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  color: #0f0f0f;
  background-color: #ffffff;
  transition: border-color 0.25s;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

button {
  cursor: pointer;
}

button:hover {
  border-color: #396cd8;
}
button:active {
  border-color: #396cd8;
  background-color: #e8e8e8;
}

input,
button {
  outline: none;
}

#greet-input {
  margin-right: 5px;
}

@media (prefers-color-scheme: dark) {
  :root {
    color: #f6f6f6;
    background-color: #2f2f2f;
  }

  a:hover {
    color: #24c8db;
  }

  input,
  button {
    color: #ffffff;
    background-color: #0f0f0f98;
  }
  button:active {
    background-color: #0f0f0f69;
  }
}

================
File: tauri/test/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}

================
File: tauri/test/vite.config.ts
================
import { defineConfig } from "vite";

// @ts-expect-error process is a nodejs global
const host = process.env.TAURI_DEV_HOST;

// https://vitejs.dev/config/
export default defineConfig(async () => ({

  // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
  //
  // 1. prevent vite from obscuring rust errors
  clearScreen: false,
  // 2. tauri expects a fixed port, fail if that port is not available
  server: {
    port: 1420,
    strictPort: true,
    host: host || false,
    hmr: host
      ? {
          protocol: "ws",
          host,
          port: 1421,
        }
      : undefined,
    watch: {
      // 3. tell vite to ignore watching `src-tauri`
      ignored: ["**/src-tauri/**"],
    },
  },
}));

================
File: tauri/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

================
File: tauri/tsconfig.node.json
================
{
  "compilerOptions": {
    "composite": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: tauri/vite.config.ts
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],

  // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
  // prevent vite from obscuring rust errors
  clearScreen: false,
  // tauri expects a fixed port, fail if that port is not available
  server: {
    port: 5173,
    strictPort: true,
  },
  // to make use of `TAURI_DEBUG` and other env variables
  // https://tauri.studio/v1/api/config#buildconfig.beforedevcommand
  envPrefix: ['VITE_', 'TAURI_'],
  build: {
    // Tauri supports es2021
    target: ['es2021', 'chrome100', 'safari13'],
    // don't minify for debug builds
    minify: !process.env.TAURI_DEBUG ? 'esbuild' : false,
    // produce sourcemaps for debug builds
    sourcemap: !!process.env.TAURI_DEBUG,
  },
});



================================================================
End of Codebase
================================================================
