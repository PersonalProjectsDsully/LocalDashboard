"""
LLM JSON Extractor

This module extracts valid JSON from mixed text responses generated by language models.
It supports various formats including code blocks, inline JSON, and other common patterns.
"""

import re
import json
import logging

logger = logging.getLogger(__name__)

def extract_json_from_llm_response(llm_response: str) -> str:
    """
    Extract valid JSON from a mixed-text LLM response
    
    This function attempts to find JSON in various formats within an LLM response:
    1. JSON in code blocks with json tag
    2. JSON in generic code blocks
    3. JSON directly in the text
    
    Args:
        llm_response: The raw text response from an LLM
        
    Returns:
        The extracted JSON string or None if no valid JSON is found
    """
    if not llm_response:
        return None
    
    # First try to find JSON in code blocks with 'json' tag (preferred format)
    json_pattern = r'```(?:json)?\s*([\s\S]*?)\s*```'
    json_matches = re.findall(json_pattern, llm_response)
    
    if json_matches:
        for potential_json in json_matches:
            # Check if this block contains valid JSON
            try:
                # Try to parse it to validate
                parsed = json.loads(potential_json.strip())
                if "action" in parsed:  # Ensure it has the action field we need
                    logger.info(f"Found valid JSON in code block with action field")
                    return potential_json.strip()
            except json.JSONDecodeError:
                continue
    
    # If no valid JSON in code blocks, try to find JSON directly in the text
    json_pattern = r'(\{[\s\S]*?\})'
    json_matches = re.findall(json_pattern, llm_response)
    
    if json_matches:
        for potential_json in json_matches:
            # Try each match until we find valid JSON
            try:
                # Needs to have at least action field to be our JSON
                parsed = json.loads(potential_json)
                if "action" in parsed:
                    logger.info(f"Found valid JSON directly in text with action field")
                    return potential_json
            except json.JSONDecodeError:
                continue
    
    logger.warning(f"No valid JSON found in LLM response")
    return None
