"""
Task Models Module

This module defines Pydantic models for task management in the LocalDashboard application.
These models are used for validation, serialization, and documentation of the API.
"""

from pydantic import BaseModel, Field, validator
from typing import List, Dict, Any, Optional
from datetime import datetime, date
import uuid
import re

# Status and priority options (for validation and documentation)
TASK_STATUSES = ["todo", "in-progress", "blocked", "review", "done"]
TASK_PRIORITIES = ["low", "medium", "high", "critical"]


class TaskBase(BaseModel):
    """Base model for task data."""
    title: str = Field(..., description="Task title")
    description: Optional[str] = Field(None, description="Detailed task description")
    status: str = Field("todo", description="Current task status")
    priority: Optional[str] = Field(None, description="Task priority level")
    due: Optional[str] = Field(None, description="Due date in YYYY-MM-DD format")
    assigned_to: Optional[str] = Field(None, description="Person assigned to the task")
    tags: Optional[List[str]] = Field(None, description="List of tags associated with the task")
    
    @validator('status')
    def validate_status(cls, v):
        """Validate that status is one of the allowed values."""
        if v.lower() not in TASK_STATUSES:
            raise ValueError(f"Status must be one of {TASK_STATUSES}")
        return v.lower()
    
    @validator('priority')
    def validate_priority(cls, v):
        """Validate that priority is one of the allowed values."""
        if v is not None and v.lower() not in TASK_PRIORITIES:
            raise ValueError(f"Priority must be one of {TASK_PRIORITIES}")
        return v.lower() if v else None
    
    @validator('due')
    def validate_due_date(cls, v):
        """Validate that due date is in correct format."""
        if v is not None:
            try:
                datetime.strptime(v, "%Y-%m-%d")
            except ValueError:
                raise ValueError("Due date must be in YYYY-MM-DD format")
        return v


class TaskCreate(TaskBase):
    """Model for creating a new task."""
    id: Optional[str] = Field(None, description="Unique task identifier (generated if not provided)")
    
    @validator('id')
    def validate_id(cls, v):
        """Validate and format task ID."""
        if v is None:
            # ID will be generated by the service
            return None
            
        # Ensure ID format is valid
        if not re.match(r'^[a-zA-Z0-9_-]+$', v):
            raise ValueError("Task ID can only contain letters, numbers, underscores, and hyphens")
        return v


class TaskUpdate(TaskBase):
    """Model for updating an existing task."""
    pass


class TaskInDB(TaskBase):
    """Model representing a task as stored in the database."""
    id: str
    project_id: str
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    
    class Config:
        from_attributes = True # Updated from orm_mode for Pydantic V2


class TaskStatusUpdate(BaseModel):
    """Model for updating only the status of a task."""
    status: str
    
    @validator('status')
    def validate_status(cls, v):
        """Validate that status is one of the allowed values."""
        if v.lower() not in TASK_STATUSES:
            raise ValueError(f"Status must be one of {TASK_STATUSES}")
        return v.lower()


class TaskAssigneeUpdate(BaseModel):
    """Model for updating only the assignee of a task."""
    assigned_to: str


class TaskStatistics(BaseModel):
    """Model for task statistics response."""
    total_tasks: int
    total_projects: int
    status_breakdown: Dict[str, int]
    priority_breakdown: Dict[str, int]
    overdue_count: int
    due_today_count: int
    due_this_week_count: int
    assignee_breakdown: Dict[str, int]


class TaskTemplate(BaseModel):
    """Model for a task template."""
    id: str
    name: str
    description: Optional[str] = None
    template: Dict[str, Any]


class TaskFromTemplate(BaseModel):
    """Model for creating a task from a template."""
    template_id: str
    title: Optional[str] = None
    description: Optional[str] = None
    status: Optional[str] = None
    priority: Optional[str] = None
    due: Optional[str] = None
    assigned_to: Optional[str] = None
    tags: Optional[List[str]] = None